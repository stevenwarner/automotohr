<?php defined('BASEPATH') OR exit('No direct script access allowed');

if (!function_exists('getUserIP')) {
    function getUserIP() {
        $client = @$_SERVER['HTTP_CLIENT_IP'];
        $forward = @$_SERVER['HTTP_X_FORWARDED_FOR'];
        $remote = $_SERVER['REMOTE_ADDR'];
        
        if (filter_var($client, FILTER_VALIDATE_IP)) {
            $ip = $client;
        } elseif (filter_var($forward, FILTER_VALIDATE_IP)) {
            $ip = $forward;
        } else {
            $ip = $remote;
        }
        
        return $ip;
    }
}

if (!function_exists('clean')) {
    function clean($string) {
        $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.
        $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
        return preg_replace('/-+/', '-', $string); // Replaces multiple hyphens with single one.
    }
}

if (!function_exists('generateRandomString')) {
    function generateRandomString($length) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }
}

if (!function_exists('random_key')) {
    function random_key($str_length = 24) {
        $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $bytes = openssl_random_pseudo_bytes(3 * $str_length / 4 + 1);
        $repl = unpack('C2', $bytes);
        $first = $chars[$repl[1] % 62];
        $second = $chars[$repl[2] % 62];
        return strtr(substr(base64_encode($bytes), 0, $str_length), '+/', "$first$second");
    }
}

if (!function_exists('sendMail')) {
    function sendMail($from, $to, $subject, $body, $fromName = NULL, $replyTo = NULL) {
        require_once(APPPATH . 'libraries/phpmailer/PHPMailerAutoload.php');
        $mail = new PHPMailer;
        $mail->From = $from;
        $mail->FromName = $fromName;
        
        if ($replyTo == NULL) {
            $mail->addReplyTo($from);
        } else {
            $mail->addReplyTo($replyTo);
        }
        
        $mail->addAddress($to);
        $mail->CharSet = 'UTF-8';
        $mail->isHTML(true);
        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->send();
    }
}

if (!function_exists('sendMailMultipleRecipients')) {
    function sendMailMultipleRecipients($from, $to = array(), $subject, $body, $fromName = NULL, $replyTo = NULL) {
        require_once(APPPATH . 'libraries/phpmailer/PHPMailerAutoload.php');
        $mail = new PHPMailer;
        $mail->From = $from;
        $mail->FromName = $fromName;

        if ($replyTo == NULL) {
            $mail->addReplyTo($from);
        } else {
            $mail->addReplyTo($replyTo);
        }

        foreach ($to as $address) {
            $mail->addAddress($address);
        }

        $mail->CharSet = 'UTF-8';
        $mail->isHTML(true);
        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->send();
    }

}

if (!function_exists('sendMailWithCC')) {
    function sendMailWithCC($from, $to, $cc, $subject, $body, $fromName = NULL, $replyTo = NULL) {
        require_once(APPPATH . 'libraries/phpmailer/PHPMailerAutoload.php');
        $mail = new PHPMailer;
        $mail->From = $from;
        $mail->FromName = $fromName;
        if ($replyTo == NULL) {
            $mail->addReplyTo($from);
        } else {
            $mail->addReplyTo($replyTo);
        }
        $mail->addAddress($to);
        $mail->addCC($cc);
        $mail->CharSet = 'UTF-8';
        $mail->isHTML(true);
        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->send();
    }
}

if (!function_exists('sendMailWithAttachment')) {
    function sendMailWithAttachment($from, $to, $subject, $body, $fromName = NULL, $file, $replyTo = NULL) {
        require_once(APPPATH . 'libraries/phpmailer/PHPMailerAutoload.php');
        $mail = new PHPMailer;
        $mail->From = $from;
        $mail->FromName = $fromName;
        if ($replyTo == NULL) {
            $mail->addReplyTo($from);
        } else {
            $mail->addReplyTo($replyTo);
        }
        $mail->addAddress($to);
        $mail->CharSet = 'UTF-8';
        $mail->isHTML(true);
        $mail->AddAttachment($file['tmp_name'], $file['name']);
        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->send();
    }
}

if (!function_exists('sendMailWithAttachmentRealPath')) {
    function sendMailWithAttachmentRealPath($from, $to, $subject, $body, $fromName = NULL, $filePath = NULL, $replyTo = NULL) {
        require_once(APPPATH . 'libraries/phpmailer/PHPMailerAutoload.php');
        $mail = new PHPMailer;
        $mail->From = $from;
        $mail->FromName = $fromName;
        
        if ($replyTo == NULL) {
            $mail->addReplyTo($from);
        } else {
            $mail->addReplyTo($replyTo);
        }
        
        $mail->addAddress($to);
        $mail->CharSet = 'UTF-8';
        $mail->isHTML(true);

        if ($filePath != NULL) {
            $mail->AddAttachment($filePath);
        }

        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->send();
    }
}

if (!function_exists('sendMailWithStringAttachment')) {
    function sendMailWithStringAttachment($from, $to, $subject, $body, $fromName = NULL, $files, $replyTo = NULL) {
        require_once(APPPATH . 'libraries/phpmailer/PHPMailerAutoload.php');
        $mail = new PHPMailer;
        $mail->From = $from;
        $mail->FromName = $fromName;

        if ($replyTo == NULL) {
            $mail->addReplyTo($from);
        } else {
            $mail->addReplyTo($replyTo);
        }

        $mail->addAddress($to);
        $mail->CharSet = 'UTF-8';
        $mail->isHTML(true);

        foreach ($files as $file) {
            $string = file_get_contents(AWS_S3_BUCKET_URL . urlencode($file['document_name']));
            $mail->AddStringAttachment($string, $file['document_original_name'] . '.' . $file['document_type'], $encoding = 'base64', $type = 'application/octet-stream');
        }

        $mail->Subject = $subject;
        $mail->Body = $body;
        $mail->send();
    }
}

if (!function_exists('db_get_active_countries')) {
    function db_get_active_countries() {
        $CI = &get_instance();
        $CI->db->select('*');
        $CI->db->where('active', '1');
        $CI->db->order_by("order", "asc");
        $CI->db->from('countries');
        return $CI->db->get()->result_array();
    }
}

if (!function_exists('db_get_active_states')) {
    function db_get_active_states($sid = NULL) {
        $CI = &get_instance();
        $CI->db->select('sid, state_code, state_name');
        $CI->db->where('country_sid', $sid);
        $CI->db->order_by("order", "asc");
        $CI->db->where('active', '1');
        $CI->db->from('states');
        return $CI->db->get()->result_array();
    }
}

if (!function_exists('db_get_state_name_only')) {
    function db_get_state_name_only($state_sid) {
        $CI = &get_instance();
        $CI->db->select('state_name');
        $CI->db->where('sid', $state_sid);
        $CI->db->from('states');
        $data = $CI->db->get()->result_array();

        if (!empty($data)) {
            $data = $data[0];
            return $data['state_name'];
        } else {
            return '';
        }
    }
}

if (!function_exists('db_get_country_name')) {
    function db_get_country_name($sid) {
        $CI = &get_instance();
        $CI->db->select('*');
        $CI->db->where('sid', $sid);
        $CI->db->from('countries');
        $result = $CI->db->get()->result_array();
        return $result[0];
    }
}

if (!function_exists('db_get_state_name')) {
    function db_get_state_name($sid) {
        $CI = &get_instance();
        $CI->db->select('country_sid, state_code, state_name, country_code, country_name');
        $CI->db->join('countries', 'countries.sid = states.country_sid');
        $CI->db->where('states.sid', $sid);
        $CI->db->from('states');
        $result = $CI->db->get()->result_array();
        if(isset($result[0])){
            return $result[0];
        } else {
            return array();
        }
    }
}

if (!function_exists('my_date_format')) {
    function my_date_format($data) {
        return date('m/d/Y', strtotime($data));
    }
}

if (!function_exists('db_get_cleanstring')) {
    function db_get_cleanstring($string) {
        $string = strtolower($string); //Lower case everything        
        $string = preg_replace("/[^a-z0-9_\s-]/", "", $string); //Make alphanumeric (removes all other characters)        
        $string = preg_replace("/[\s-]+/", " ", $string); //Clean up multiple dashes or whitespaces       
        $string = preg_replace("/[\s_]/", "-", $string); //Convert whitespaces and underscore to dash
        return $string;
    }
}

if (!function_exists('encode_string')) {
    function encode_string($password) {
        $key = '#&$sdfdadasdsaderfvrfgbty78hnmuik263uifs5634d';
        $encoded = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_256, md5($key), $password, MCRYPT_MODE_CBC, md5(md5($key))));
        return $encoded;
    }
}

if (!function_exists('decode_string')) {
    function decode_string($encoded) {
        $key = '#&$sdfdadasdsaderfvrfgbty78hnmuik263uifs5634d';
        $decoded = rtrim(mcrypt_decrypt(MCRYPT_RIJNDAEL_256, md5($key), base64_decode($encoded), MCRYPT_MODE_CBC, md5(md5($key))), "\0");
        return $decoded;
    }
}

if (!function_exists('formatDateForDb')) {
    function formatDateForDb($date) {
        $date_parts = explode('-', $date);
        $month = $date_parts[0];
        $day = $date_parts[1];
        $year = $date_parts[2];
        return strtotime($year . '-' . $month . '-' . $day . '00:00:00');
    }
}

if (!function_exists('convert_date_to_db_format')) {
    function convert_date_to_db_format($string_date) {
        return date('Y-m-d H:i:s', strtotime(str_replace('-', '/', $string_date)));
    }
}

if (!function_exists('convert_date_to_frontend_format')) {
    function convert_date_to_frontend_format($string_date) {
        if ($string_date == '0000-00-00 00:00:00') {
            $string_date = date('Y-m-d H:i:s');
        }
        return date('m/d/Y', strtotime(str_replace('-', '/', $string_date)));
    }
}

if (!function_exists('db_get_enum_values')) {
    function db_get_enum_values($table, $field) {
        $CI = &get_instance();
        $type = $CI->db->query("SHOW COLUMNS FROM `" . $table . "` WHERE Field = '" . $field . "'")->row(0)->Type;
        preg_match("/^enum\(\'(.*)\'\)$/", $type, $matches);
        $enum = explode("','", $matches[1]);
        return $enum;
    }
}

//Stackoverflow function to convert amount to words
if (!function_exists('convert_number_to_words')) {
    function convert_number_to_words($number) {
        $hyphen = '-';
        $conjunction = ' and ';
        $separator = ', ';
        $negative = 'negative ';
        $decimal = ' point ';
        $dictionary = array(
                            0 => 'zero',
                            1 => 'one',
                            2 => 'two',
                            3 => 'three',
                            4 => 'four',
                            5 => 'five',
                            6 => 'six',
                            7 => 'seven',
                            8 => 'eight',
                            9 => 'nine',
                            10 => 'ten',
                            11 => 'eleven',
                            12 => 'twelve',
                            13 => 'thirteen',
                            14 => 'fourteen',
                            15 => 'fifteen',
                            16 => 'sixteen',
                            17 => 'seventeen',
                            18 => 'eighteen',
                            19 => 'nineteen',
                            20 => 'twenty',
                            30 => 'thirty',
                            40 => 'fourty',
                            50 => 'fifty',
                            60 => 'sixty',
                            70 => 'seventy',
                            80 => 'eighty',
                            90 => 'ninety',
                            100 => 'hundred',
                            1000 => 'thousand',
                            1000000 => 'million',
                            1000000000 => 'billion',
                            1000000000000 => 'trillion',
                            1000000000000000 => 'quadrillion',
                            1000000000000000000 => 'quintillion'
                        );

        if (!is_numeric($number)) {
            return false;
        }

        if (($number >= 0 && (int)$number < 0) || (int)$number < 0 - PHP_INT_MAX) {
            // overflow
            trigger_error(
                'convert_number_to_words only accepts numbers between -' . PHP_INT_MAX . ' and ' . PHP_INT_MAX, E_USER_WARNING
            );
            return false;
        }

        if ($number < 0) {
            return $negative . convert_number_to_words(abs($number));
        }

        $string = $fraction = null;

        if (strpos($number, '.') !== false) {
            list($number, $fraction) = explode('.', $number);
        }

        switch (true) {
            case $number < 21:
                $string = $dictionary[$number];
                break;
            case $number < 100:
                $tens = ((int)($number / 10)) * 10;
                $units = $number % 10;
                $string = $dictionary[$tens];
                if ($units) {
                    $string .= $hyphen . $dictionary[$units];
                }
                break;
            case $number < 1000:
                $hundreds = $number / 100;
                $remainder = $number % 100;
                $string = $dictionary[$hundreds] . ' ' . $dictionary[100];
                if ($remainder) {
                    $string .= $conjunction . convert_number_to_words($remainder);
                }
                break;
            default:
                $baseUnit = pow(1000, floor(log($number, 1000)));
                $numBaseUnits = (int)($number / $baseUnit);
                $remainder = $number % $baseUnit;
                $string = convert_number_to_words($numBaseUnits) . ' ' . $dictionary[$baseUnit];
                if ($remainder) {
                    $string .= $remainder < 100 ? $conjunction : $separator;
                    $string .= convert_number_to_words($remainder);
                }
                break;
        }

        if (null !== $fraction && is_numeric($fraction)) {
            $string .= $decimal;
            $words = array();
            foreach (str_split((string)$fraction) as $number) {
                $words[] = $dictionary[$number];
            }
            $string .= implode(' ', $words);
        }

        return $string;
    }
}

if (!function_exists('db_get_cart_content')) {
    function db_get_cart_content($sid) {
        $CI = &get_instance();
        $CI->db->select('shopping_cart.sid, shopping_cart.product_sid, shopping_cart.qty, shopping_cart.date, shopping_cart.company_sid, shopping_cart.no_of_days, products.name, products.serialized_extra_info, products.price, products.product_image');
        $CI->db->where('company_sid', $sid);
        $CI->db->from('shopping_cart');
        $CI->db->join('products', 'products.sid = shopping_cart.product_sid');
        $result = $CI->db->get()->result_array();
        return $result;
    }

}

if (!function_exists('get_email_template')) {
    function get_email_template($template_id) {
        $CI = &get_instance();
        $CI->db->where('sid', $template_id);
        $result = $CI->db->get('email_templates')->row_array();
        if (count($result) > 0) {
            return $result;
        } else {
            return 0;
        }
    }
}

if (!function_exists('month_date_year')) {
    function month_date_year($date) {
        return date('M d Y', strtotime($date));
    }
}

if (!function_exists('get_job_title')) {
    function get_job_title($job_id) {
        $CI = &get_instance();
        $CI->db->select('Title');
        $CI->db->where('sid', $job_id);
        $CI->db->from('portal_job_listings');
        $result = $CI->db->get()->result_array();

        if (isset($result[0])) {
            return $result[0]['Title'];
        } else {
            return 'Job Deleted';
        }
    }
}

if (!function_exists('db_get_products_details')) {
    function db_get_products_details($product_id) {
        $CI = &get_instance();
        $CI->db->select('sid, name, active, price, number_of_postings, expiry_days, daily');
        $CI->db->where('sid', $product_id);
        $CI->db->from('products');
        $result = $CI->db->get()->result_array();
        if (!empty($result)) {
            return $result[0];
        }
    }
}

if (!function_exists('date_with_time')) {
    function date_with_time($date) {
        return date('D, d M Y h:i:s', strtotime($date));
    }
}

if (!function_exists('convert_email_template')) {
    function convert_email_template($emailTemplateBody, $employer_sid = NULL) {
        $CI = &get_instance();
        $CI->db->where('sid', $employer_sid);
        $userData = $CI->db->get('executive_users')->row_array();
        if (count($userData) > 0) {
            $emailTemplateBody = str_replace('{{firstname}}', ucfirst($userData['first_name']), $emailTemplateBody);
            $emailTemplateBody = str_replace('{{lastname}}', ucfirst($userData['last_name']), $emailTemplateBody);
            $emailTemplateBody = str_replace('{{site_url}}', base_url(), $emailTemplateBody);
            $emailTemplateBody = str_replace('{{date}}', month_date_year(date('Y-m-d')), $emailTemplateBody);
            $emailTemplateBody = str_replace('{{username}}', $userData['username'], $emailTemplateBody);
            $emailTemplateBody = str_replace('{{password}}', decode_string($userData['key']), $emailTemplateBody);
            $emailTemplateBody = str_replace('{{employer_id}}', $employer_sid, $emailTemplateBody);
            $emailTemplateBody = str_replace('{{verification_key}}', $userData['activation_code'], $emailTemplateBody);
            return $emailTemplateBody;
        } else {
            return 0;
        }
    }
}

if (!function_exists('get_no_of_applicants')) {
    function get_no_of_applicants($job_id, $company_sid) {
        $CI = &get_instance();
        $CI->db->select('*');
        $CI->db->where('job_sid', $job_id);
        $CI->db->where('company_sid', $company_sid);
        $result = $CI->db->get('portal_applicant_jobs_list');
        return $result->num_rows();
    }
}


if(!function_exists('get_company_details')){
    function get_company_details($company_sid){
        $CI = & get_instance();
        $CI->db->select('*');
        $CI->db->where('parent_sid', 0);
        $CI->db->where('sid', $company_sid);
        $record_row = $CI->db->get('users')->result_array();

        if(!empty($record_row)){
            return $record_row[0];
        } else {
            return array();
        }
    }
}

if (!function_exists('is_leap_year')) {
    function is_leap_year($year = NULL) {
        if (is_numeric($year)) {
            return checkdate(2, 29, (int)$year);
        } else {
            return false;
        }
    }
}

if (!function_exists('db_get_sub_domain')) {
    function db_get_sub_domain($company_id) {
        $CI = &get_instance();
        $CI->db->select('sub_domain');
        $CI->db->where('user_sid', $company_id);
        $CI->db->from('portal_employer');
        $result = $CI->db->get()->result_array();
        $domain_name = $result[0]['sub_domain'];
        return $domain_name;
    }
}

if(!function_exists('my_print_r')){
    function my_print_r($obj, $ip_address){
        $ip = $_SERVER['REMOTE_ADDR'];

        if($ip == $ip_address){
            echo  '<pre>';
            print_r($obj);
            echo '</pre>';
        }
    }
}

if(!function_exists('my_echo')){
    function my_echo($str, $ip_address){
        $ip = $_SERVER['REMOTE_ADDR'];
        if($ip == $ip_address){
            echo  '<pre>';
            echo $str;
            echo '</pre>';
        }
    }
}