<?php

class Calendar_model extends CI_Model
{
    function __construct()
    {
        parent::__construct();
    }

    function get_events_applicants($id)
    {
        $this->db->select('*')
            ->from('portal_schedule_event')
            ->where('companys_sid', $id)
            ->where('users_type', 'applicant');
        $query = $this->db->get();
        $events = array();


        if ($query->num_rows() > 0) {
            foreach ($query->result_array() as $row4) {
                $startTime24Hr = date("H:i", strtotime($row4['eventstarttime']));
                $row4['eventstarttime24Hr'] = $startTime24Hr;
                $endTime24Hr = date("H:i", strtotime($row4['eventendtime']));
                $row4['eventendtime24Hr'] = $endTime24Hr;
                $date_applied = explode('-', $row4['date']);
                $row4['frontDate'] = $date_applied['1'] . "-" . $date_applied['2'] . "-" . $date_applied['0'];
                $row4['backDate'] = $row4['date'];
                $row4['category_uc'] = ucwords($row4['category']);

                if ($row4['applicant_job_sid'] != NULL && $row4['applicant_job_sid'] != 0) {
                    if ($row4['users_type'] == "applicant") {
                        $this->db->select('first_name,last_name,phone_number as phone_number');
                        $this->db->where('sid', $row4['applicant_job_sid']);
                        $result = $this->db->get('portal_job_applications')->result_array();
                    } else if ($row4['users_type'] == "employee") {
                        $this->db->select('first_name,last_name,PhoneNumber as phone_number');
                        $this->db->where('sid', $row4['applicant_job_sid']);
                        $result = $this->db->get('users')->result_array();
                    }

                    if (!empty($result)) {
                        $row4['f_name_uc'] = ": " . ucwords($result[0]['first_name']);
                        $row4['l_name_uc'] = ucwords($result[0]['last_name']);
                        $row4['default_phone_number'] = ucwords($result[0]['phone_number']);
                    } else {
                        $row4['f_name_uc'] = '';
                        $row4['l_name_uc'] = '';
                        $row4['default_phone_number'] = '';
                    }
                } else {
                    $row4['f_name_uc'] = "";
                    $row4['l_name_uc'] = "";
                    $row4['default_phone_number'] = "";
                }

                $external_participants = $this->get_event_external_participants($row4['sid']);
                $row4['external_participants'] = $external_participants;

                $events[] = $row4;
            }
        }
        return $events;
    }

    function get_events_employee($id)
    {
        $this->db->select('*')
            ->from('portal_schedule_event')
            ->where('applicant_job_sid', $id)
            ->where('users_type', 'employee');
        $array1 = $this->db->get()->result_array();
        //checking event in interviewer filed
        $where = "FIND_IN_SET(" . $id . ", interviewer)";
        $this->db->select('*')
            ->from('portal_schedule_event')
            ->where($where)
            ->where('users_type', 'employee');
        $array2 = $this->db->get()->result_array();

        foreach ($array2 as $key => $row) {
            $row['editFlag'] = "false";
            $array2[$key] = $row;
        }

        $rawEvents = array_merge($array1, $array2);
        $events = array();

        foreach ($rawEvents as $row4) {
            $startTime24Hr = date("H:i", strtotime($row4['eventstarttime']));
            $row4['eventstarttime24Hr'] = $startTime24Hr;
            $endTime24Hr = date("H:i", strtotime($row4['eventendtime']));
            $row4['eventendtime24Hr'] = $endTime24Hr;
            $date_applied = explode('-', $row4['date']);
            $row4['frontDate'] = $date_applied['1'] . "-" . $date_applied['2'] . "-" . $date_applied['0'];
            $row4['backDate'] = $row4['date'];
            $row4['category_uc'] = ucwords($row4['category']);

            if ($row4['applicant_job_sid'] != NULL && $row4['applicant_job_sid'] != 0) {
                if ($row4['users_type'] == "applicant") {
                    $this->db->select('first_name,last_name,phone_number as phone_number');
                    $this->db->where('sid', $row4['applicant_job_sid']);
                    $result = $this->db->get('portal_job_applications')->result_array();
                } else if ($row4['users_type'] == "employee") {
                    $this->db->select('first_name,last_name, PhoneNumber as phone_number');
                    $this->db->where('sid', $row4['applicant_job_sid']);
                    $result = $this->db->get('users')->result_array();
                }

                if (!empty($result)) {
                    $row4['f_name_uc'] = ": " . ucwords($result[0]['first_name']);
                    $row4['l_name_uc'] = ucwords($result[0]['last_name']);
                    $row4['default_phone_number'] = ucwords($result[0]['phone_number']);
                } else {
                    $row4['f_name_uc'] = "";
                    $row4['l_name_uc'] = "";
                    $row4['default_phone_number'] = "";
                }
            } else {
                $row4['f_name_uc'] = "";
                $row4['default_phone_number'] = "";
            }

            $external_participants = $this->get_event_external_participants($row4['sid']);
            $row4['external_participants'] = $external_participants;

            $events[] = $row4;
        }
        return $events;
    }

    function get_events_employee_for_employeer($id)
    { //checking event in applicant job sid
        $this->db->select('*')
            ->from('portal_schedule_event')
            ->where('applicant_job_sid', $id)
            ->where('users_type', 'employee');
        $array1 = $this->db->get()->result_array();

        //checking event in interviewer filed
        $where = "FIND_IN_SET(" . $id . ", interviewer)";
        $this->db->select('*')
            ->from('portal_schedule_event')
            ->where($where);
        $array2 = $this->db->get()->result_array();

        foreach ($array2 as $key => $row) {
            $row['editFlag'] = "false";
            $array2[$key] = $row;
        }

        $rawEvents = array_merge($array1, $array2);
        $events = array();

        foreach ($rawEvents as $row4) {
            $startTime24Hr = date("H:i", strtotime($row4['eventstarttime']));
            $row4['eventstarttime24Hr'] = $startTime24Hr;
            $endTime24Hr = date("H:i", strtotime($row4['eventendtime']));
            $row4['eventendtime24Hr'] = $endTime24Hr;
            $date_applied = explode('-', $row4['date']);
            $row4['frontDate'] = $date_applied['1'] . "-" . $date_applied['2'] . "-" . $date_applied['0'];
            $row4['backDate'] = $row4['date'];
            $row4['category_uc'] = ucwords($row4['category']);

            if ($row4['applicant_job_sid'] != NULL && $row4['applicant_job_sid'] != 0) {
                if ($row4['users_type'] == "applicant") {
                    $this->db->select('first_name,last_name');
                    $this->db->where('sid', $row4['applicant_job_sid']);
                    $result = $this->db->get('portal_job_applications')->result_array();
                } else if ($row4['users_type'] == "employee") {
                    $this->db->select('first_name,last_name');
                    $this->db->where('sid', $row4['applicant_job_sid']);
                    $result = $this->db->get('users')->result_array();
                }

                $first_name = isset($result[0]['first_name']) ? ucwords($result[0]['first_name']) : '';
                $last_name = isset($result[0]['last_name']) ? ucwords($result[0]['last_name']) : '';

                $row4['f_name_uc'] = ": " . $first_name;
                $row4['l_name_uc'] = $last_name;
            } else {
                $row4['f_name_uc'] = "";
                $row4['l_name_uc'] = "";
            }
            $events[] = $row4;
        }
        return $events;
    }

    function get_applicants($id)
    {
        $this->db->select('portal_applicant_jobs_list.sid as portal_applicant_jobs_list_sid');
        $this->db->select('portal_applicant_jobs_list.job_sid');
        $this->db->select('portal_job_applications.sid');
        $this->db->select('portal_job_applications.first_name');
        $this->db->select('portal_job_applications.last_name');
        $this->db->select('portal_job_applications.email');
        $this->db->select('portal_job_applications.phone_number');
        $this->db->where('portal_applicant_jobs_list.company_sid', $id);
        $this->db->where('portal_applicant_jobs_list.archived', 0);
        $this->db->where('portal_job_applications.hired_status', 0);
        $this->db->order_by('portal_applicant_jobs_list.sid', 'DESC');
        $this->db->join('portal_job_applications', 'portal_job_applications.sid = portal_applicant_jobs_list.portal_job_applications_sid', 'left');
        $applicant_result = $this->db->get('portal_applicant_jobs_list')->result_array();
        return $applicant_result;
    }

    function getCompanyAccounts($company_id)
    {
        $args = array('parent_sid' => $company_id, 'active' => 1, 'career_page_type' => 'standard_career_site');
        $this->db->select('sid,username,email,first_name,last_name,access_level,is_executive_admin,PhoneNumber');
        //$this->db->where('is_executive_admin', 0);
        $res = $this->db->get_where('users', $args);
        $ret = $res->result_array();
        return $ret;
    }

    function get_applicant_detail($applicant_sid)
    {
        $this->db->select('portal_job_applications.sid');
        $this->db->select('portal_job_applications.first_name');
        $this->db->select('portal_job_applications.last_name');
        $this->db->select('portal_job_applications.email');
        $this->db->select('portal_job_applications.phone_number');
        $this->db->select('portal_job_applications.address');
        $this->db->select('portal_job_applications.country');
        $this->db->select('portal_job_applications.city');
        $this->db->select('portal_job_applications.state');
        $this->db->select('portal_job_applications.zipcode');
        $this->db->select('portal_job_applications.resume');
        $this->db->select('portal_job_applications.cover_letter');
        $this->db->select('portal_job_applications.YouTube_Video as youtube_video');
        $this->db->select('countries.country_name');
        $this->db->select('states.state_name');
        $this->db->where('portal_job_applications.sid', $applicant_sid);
        $this->db->join('countries', 'countries.sid = portal_job_applications.country', 'left');
        $this->db->join('states', 'states.sid = portal_job_applications.state', 'left');
        $this->db->from('portal_job_applications');

        $record_obj = $this->db->get();
        $record_arr = $record_obj->result_array();
        $record_obj->free_result();

        if (!empty($record_arr)) {
            $record_arr = $record_arr[0];
            $record_arr['job_applications'] = $this->get_applicant_jobs($applicant_sid);
            return $record_arr;
        } else {
            return array();
        }
    }

    function get_employee_detail($employee_sid)
    {
        $this->db->select('users.sid');
        $this->db->select('users.first_name');
        $this->db->select('users.last_name');
        $this->db->select('users.email');
        $this->db->select('users.PhoneNumber as phone_number');
        $this->db->select('users.Location_Address as address');
        $this->db->select('users.Location_Country as country');
        $this->db->select('users.Location_City as city');
        $this->db->select('users.Location_State as state');
        $this->db->select('users.Location_ZipCode as zipcode');
        $this->db->select('users.YouTubeVideo as youtube_video');
        $this->db->select('countries.country_name');
        $this->db->select('states.state_name');

        $this->db->where('users.sid', $employee_sid);

        $this->db->join('countries', 'countries.sid = users.Location_Country', 'left');
        $this->db->join('states', 'states.sid = users.Location_State', 'left');

        $this->db->from('users');

        $record_obj = $this->db->get();
        $record_arr = $record_obj->result_array();
        $record_obj->free_result();

        if (!empty($record_arr)) {
            $record_arr = $record_arr[0];

            return $record_arr;
        } else {
            return array();
        }
    }

    function verify_event_session($sid, $type, $company_sid)
    {
        if ($type == 'applicant') {
            $this->db->select('sid');
            $this->db->where('sid', $sid);
            $this->db->where('employer_sid', $company_sid);
            $this->db->from('portal_job_applications');
            return $this->db->count_all_results();
        }

        if ($type == 'employee') {
            $this->db->select('sid');
            $this->db->where('sid', $sid);
            $this->db->where('parent_sid', $company_sid);
            $this->db->from('users');
            return $this->db->count_all_results();
        }
    }

    function cancel_event($event_sid)
    {
        $this->db->where('sid', $event_sid);
        $this->db->set('event_status', 'cancelled');
        $this->db->update('portal_schedule_event');
    }

    function save_event($data)
    {
        return $this->db->insert('portal_schedule_event', $data);
    }

    function update_event($sid, $data)
    {
        $this->db->where('sid', $sid);
        return $this->db->update('portal_schedule_event', $data);
    }

    function deleteEvent($id)
    {
        $this->db->where('sid', $id);
        $this->db->delete('portal_schedule_event');
    }

    function get_event_details($event_sid)
    {
        $this->db->select('*');
        $this->db->where('sid', $event_sid);

        $event_obj = $this->db->get('portal_schedule_event');
        $event_arr = $event_obj->result_array();
        $event_obj->free_result();

        if (!empty($event_arr)) {
            return $event_arr[0];
        } else {
            return array();
        }
    }

    function get_user_information($company_sid, $user_sids = array())
    {
        $this->db->select('sid');
        $this->db->select('first_name');
        $this->db->select('last_name');
        $this->db->select('email');

        $this->db->where('parent_sid', $company_sid);
        $this->db->where_in('sid', $user_sids);

        $record_obj = $this->db->get('users');
        $record_arr = $record_obj->result_array();
        $record_obj->free_result();

        return $record_arr;
    }

    function get_applicant_jobs($applicant_sid)
    {
        $this->db->select('portal_applicant_jobs_list.sid');
        $this->db->select('portal_applicant_jobs_list.date_applied');
        $this->db->select('portal_applicant_jobs_list.job_sid');
        $this->db->select('portal_applicant_jobs_list.desired_job_title');
        $this->db->select('portal_job_listings.Title as job_title');
        $this->db->where('portal_applicant_jobs_list.portal_job_applications_sid', $applicant_sid);
        $this->db->join('portal_job_listings', 'portal_applicant_jobs_list.job_sid = portal_job_listings.sid', 'left');
        $this->db->from('portal_applicant_jobs_list');

        $records_obj = $this->db->get();
        $records_arr = $records_obj->result_array();
        $records_obj->free_result();

        return $records_arr;
    }

    function get_employee_events($company_sid, $employee_sid, $events_date = null)
    {
        $this->db->select('*');
        $this->db->where('companys_sid', $company_sid);
        //$this->db->where('employers_sid', $employee_sid);

        $today = date('Y-m-d');
        if ($events_date == 'upcoming') {
            $this->db->where('date >=', $today);
            $this->db->order_by('date', 'ASC');
        } else if ($events_date == 'past') {
            $this->db->where('date <', $today);
            $this->db->order_by('date', 'DESC');
        } else if ($events_date !== null) {
            $this->db->where('date', $today);
        }

        $this->db->group_start();
        $this->db->or_where('FIND_IN_SET(' . $employee_sid . ', interviewer)');
        $this->db->or_where('applicant_job_sid', $employee_sid);
        $this->db->or_where('employers_sid', $employee_sid);
        $this->db->group_end();


        $this->db->where('applicant_job_sid >', 0);

        $records_obj = $this->db->get('portal_schedule_event');
        $records_arr = $records_obj->result_array();
        $records_obj->free_result();

        return $records_arr;
    }

    public function get_company_addresses($company_sid)
    {
        $this->db->select('address');
        $this->db->group_by('address');
        $this->db->where('companys_sid', $company_sid);

        $records_obj = $this->db->get('portal_schedule_event');
        $records_events_arr = $records_obj->result_array();
        $records_obj->free_result();

        $this->db->select('Location_Address');
        $this->db->where('sid', $company_sid);
        $records_obj = $this->db->get('users');
        $records_users_arr = $records_obj->result_array();
        $records_obj->free_result();

        $this->db->select('address');
        $this->db->where('company_sid', $company_sid);
        $this->db->where('status', 1);
        $records_obj = $this->db->get('company_addresses_locations');
        $records_addresses_arr = $records_obj->result_array();
        $records_obj->free_result();

        $addresses = array();

        /*
        foreach($records_events_arr as $key => $address){
            if(!empty($address['address'])){
                if(!in_array($address['address'], $addresses)) {
                    $addresses[] = $address['address'];
                }
            }
        }
        */

        foreach ($records_users_arr as $key => $address) {
            if (!empty($address['Location_Address'])) {
                if (!in_array($address['Location_Address'], $addresses)) {
                    $addresses[] = $address['Location_Address'];
                }
            }
        }

        foreach ($records_addresses_arr as $key => $address) {
            if (!empty($address['address'])) {
                if (!in_array($address['address'], $addresses)) {
                    $addresses[] = $address['address'];
                }
            }
        }


        return $addresses;
    }

    public function save_company_address($company_sid, $address)
    {
        $this->db->select('sid');
        $this->db->where('company_sid', $company_sid);
        $this->db->where('address', $address);
        $this->db->from('company_addresses_locations');
        $count = $this->db->count_all_results();

        if ($count <= 0) {
            $data_to_save = array();
            $data_to_save['company_sid'] = $company_sid;
            $data_to_save['address'] = $address;
            $data_to_save['status'] = 1;
            $data_to_save['date_created'] = date('Y-m-d H:i:s');

            $this->db->insert('company_addresses_locations', $data_to_save);
        }
    }

    public function check_if_email_is_of_an_employee($company_sid, $email_address)
    {
        $this->db->select('sid');
        $this->db->where('parent_sid', $company_sid);
        $this->db->where('email', $email_address);

        $this->db->from('users');

        $records_obj = $this->db->get();
        $records_arr = $records_obj->result_array();
        $records_obj->free_result();

        if (!empty($records_arr)) {
            return $records_arr[0];
        } else {
            return false;
        }
    }

    public function add_event_external_participants($company_sid, $employer_sid, $event_sid, $name, $email, $show_email)
    {
        $data_to_save = array();
        $data_to_save['company_sid'] = $company_sid;
        $data_to_save['employer_sid'] = $employer_sid;
        $data_to_save['event_sid'] = $event_sid;
        $data_to_save['name'] = $name;
        $data_to_save['email'] = $email;
        $data_to_save['show_email'] = $show_email;

        $this->db->insert('portal_schedule_event_external_participants', $data_to_save);
    }

    public function remove_all_external_participants($company_sid, $employer_sid, $event_sid)
    {
        $this->db->where('company_sid', $company_sid);
        $this->db->where('employer_sid', $employer_sid);
        $this->db->where('event_sid', $event_sid);

        $this->db->delete('portal_schedule_event_external_participants');
    }

    public function append_participant_to_event($event_sid, $participant_sid){
        $this->db->select('interviewer');
        $this->db->where('sid', $event_sid);
        $this->db->from('portal_schedule_event');

        $records_obj = $this->db->get();
        $records_arr = $records_obj->result_array();
        $records_obj->free_result();

        if(!empty($records_arr)){
            $participants = $records_arr[0]['interviewer'];
            if(!empty($participants)){
                $participants = explode(',', $participants);

                if(!in_array($participant_sid, $participants)){
                    $participants[] = $participant_sid;

                    $this->db->where('sid', $event_sid);
                    $this->db->set('interviewer', implode(',', $participants));
                    $this->db->update('portal_schedule_event');
                }
            }
        }
    }

    public function get_event_external_participants($event_sid){
        $this->db->where('event_sid', $event_sid);
        $this->db->from('portal_schedule_event_external_participants');

        $records_obj = $this->db->get();
        $records_arr = $records_obj->result_array();
        $records_obj->free_result();

        if(!empty($records_arr)){
            return $records_arr;
        } else {
            return array();
        }
    }
    
    function get_all_company_applicants($company_id) {
        $this->db->select('portal_job_applications.sid, portal_applicant_jobs_list.sid as list_sid, portal_applicant_jobs_list.job_sid, portal_job_listings.Title as job_title, portal_applicant_jobs_list.desired_job_title');
//        $this->db->where('portal_applicant_jobs_list.job_sid >',0);
        $this->db->where('portal_applicant_jobs_list.archived', 0);
        $this->db->where('portal_job_applications.hired_status', 0);
        $this->db->where('portal_applicant_jobs_list.company_sid',$company_id);
        $this->db->order_by('portal_applicant_jobs_list.date_applied', 'DESC');
        $this->db->join('portal_job_applications', 'portal_job_applications.sid = portal_applicant_jobs_list.portal_job_applications_sid', 'left');
        $this->db->join('portal_job_listings', 'portal_job_listings.sid = portal_applicant_jobs_list.job_sid', 'left');
        $applicant_job_list = $this->db->get('portal_applicant_jobs_list')->result_array();
//        echo $this->db->last_query();
        return $applicant_job_list;
    }
    
    function get_all_applicant_jobs($applicant_sid, $company_id) {
        $this->db->select('portal_applicant_jobs_list.portal_job_applications_sid as applicant_sid, portal_applicant_jobs_list.sid as sid, portal_applicant_jobs_list.job_sid, portal_job_listings.Title, portal_applicant_jobs_list.desired_job_title as job_title');
//        $this->db->where('portal_applicant_jobs_list.job_sid >',0);
        $this->db->where('portal_applicant_jobs_list.archived', 0);
        $this->db->where('portal_applicant_jobs_list.company_sid',$company_id);
        $this->db->where('portal_applicant_jobs_list.portal_job_applications_sid',$applicant_sid);
        $this->db->order_by('portal_applicant_jobs_list.date_applied', 'DESC');
        $this->db->join('portal_job_listings', 'portal_job_listings.sid = portal_applicant_jobs_list.job_sid', 'left');
        $applicant_job_list = $this->db->get('portal_applicant_jobs_list')->result_array();
//        echo $this->db->last_query();
        return $applicant_job_list;
    }

}