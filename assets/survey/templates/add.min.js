$((function () { let e, t, n = { title: "", description: "", category: "", is_recurring: !1, recur_type: "days", recur_number: 0, available_date: 0, questions: [] }, i = []; function s() { if (!i.length) return $("#jsAddQuestionsArea").html('<p class="alert alert-info text-center">No questions found yet.</p>'); let e = ""; i.map((function (t) { void 0 !== t.description ? e += getDescriptionPreview(t) : e += getQuestionPreview(t) })), $("#jsAddQuestionsArea").html(e) } function o(e) { i = i.filter((function (t) { return t.question_id != e })), s() } function a(e) { return i.filter((function (t) { return t.question_id == e }))[0] } function c(e) { $("#sectionMain").addClass("hidden"), $("#sectionAddQuestionBox").addClass("hidden"), $("#sectionEditQuestionBox").addClass("hidden"), $("#sectionAddDescription").addClass("hidden"), $("#jsAddEditDescriptionId").val(""), t.setButtons(""), setTimeout((function () { "basic" === e ? ($("#sectionMain").removeClass("hidden"), t.setButtons('<button type="button" class="btn btn-orange jsTemplateSaveBtn"><i class="fa fa-save"></i>Save Changes</button>')) : "add_question" === e ? ($("#sectionAddQuestionBox").removeClass("hidden"), t.setButtons('\n                    <button type="button" class="btn btn-black jsBackToAddCoursePage"><i class="fa fa-arrow-left" aria-hidden="true"></i>&nbsp;Back</button>\n                    <button type="button" class="btn btn-orange jsAddQuestionSaveBtn"><i class="fa fa-plus-circle" aria-hidden="true"></i>&nbsp;Save Question</button>\n                ')) : "edit_question" === e ? ($("#sectionEditQuestionBox").removeClass("hidden"), t.setButtons('\n                    <button type="button" class="btn btn-black jsBackToAddCoursePage"><i class="fa fa-arrow-left" aria-hidden="true"></i>&nbsp;Back</button>\n                    <button type="button" class="btn btn-orange jsEditQuestionSaveBtn"><i class="fa fa-plus-circle" aria-hidden="true"></i>&nbsp;Update Question</button>\n                ')) : "add_description" === e ? ($("#sectionAddDescription").removeClass("hidden"), t.setButtons('\n                    <button type="button" class="btn btn-black jsBackToAddCoursePage"><i class="fa fa-arrow-left" aria-hidden="true"></i>&nbsp;Back</button>\n                    <button type="button" class="btn btn-orange jsAddEditDescription"><i class="fa fa-plus-circle" aria-hidden="true"></i>&nbsp;Save Changes</button>\n                ')) : "edit_description" === e && ($("#sectionAddDescription").removeClass("hidden"), t.setButtons('\n                    <button type="button" class="btn btn-black jsBackToAddCoursePage"><i class="fa fa-arrow-left" aria-hidden="true"></i>&nbsp;Back</button>\n                    <button type="button" class="btn btn-orange jsAddModifyDescription"><i class="fa fa-plus-circle" aria-hidden="true"></i>&nbsp;Save Changes</button>\n                ')) }), 10) } $(document).on("keyup", "#jsTemplateTitle", (function (e) { n.title = $(this).val() })), $(document).on("keyup", "#jsTemplateDescription", (function (e) { n.description = $(this).val() })), $(document).on("click", "#jsTemplateRecur", (function (e) { n.is_recurring = $(this).prop("checked"), n.is_recurring ? $(".jsRecurringSurveyBox").removeClass("hidden") : $(".jsRecurringSurveyBox").addClass("hidden") })), $(document).on("keyup", "#jsTemplateRecurNumber", (function (e) { n.recur_number = $(this).val() })), $(document).on("change", "#jsTemplateRecurType", (function (e) { n.recur_type = $(this).val() })), $(document).on("click", ".jsTemplateSaveBtn", (function (s) { s.preventDefault(), n.title ? !n.is_recurring || n.recur_number ? 0 !== i.length ? (n.questions = i, async function () { e = callButtonHook($(".jsTemplateSaveBtn"), !0); try { const e = await makeSecureCallToApiServer("surveys/templates/create", { method: "POST", headers: { "Content-Type": "application/json" }, data: JSON.stringify(n), caches: !1 }); t.closeModal(), _success(e.message, (function () { getTemplates() })) } catch (t) { handleErrorResponse(t), callButtonHook(e, !1) } }()) : _error("Please add at least one question.") : _error("Recur number is required.") : _error("Title is required.") })), $(document).on("click", ".jsTemplateAddQuestion", (function (e) { e.preventDefault(), c("add_question"), loadAddQuestionView((function (e) { e.tag = function () { let e = ""; return i.map((function (t) { void 0 !== t.description && (e = t.description) })), e }(), i.push(e), s(), c("basic") })) })), $(document).on("click", ".jsTemplateAddDescription", (function (e) { e.preventDefault(), c("add_description"), CKEDITOR.instances.jsAddEditDescription || CKEDITOR.replace("jsAddEditDescription", { toolbar: [{ name: "basicstyles", items: ["Bold", "Italic", "Underline"] }] }), CKEDITOR.instances.jsAddEditDescription.setData("") })), $(document).on("click", ".jsTemplateEditDescription", (function (e) { e.preventDefault(); const t = a($(this).closest(".jsQuestionDescription").data("id").replace("desc_", "")); c("edit_description"), CKEDITOR.instances.jsAddEditDescription || CKEDITOR.replace("jsAddEditDescription", { toolbar: [{ name: "basicstyles", items: ["Bold", "Italic", "Underline"] }] }), CKEDITOR.instances.jsAddEditDescription.setData(t.description), $("#jsAddEditDescriptionId").val(t.question_id) })), $(document).on("click", ".jsAddEditDescription", (function (e) { e.preventDefault(); const t = CKEDITOR.instances.jsAddEditDescription.getData(); t.trim() && "" !== $("<div>").html(t).text().trim() ? (i.push({ question_id: generateRandomAndUniqueId(), description: t, plainDescription: $("<div>").html(t).text().trim(), slug: getSlug(t), questions: [] }), c("basic"), s()) : _error("Description cannot be empty.") })), $(document).on("click", ".jsAddModifyDescription", (function (e) { e.preventDefault(); const t = CKEDITOR.instances.jsAddEditDescription.getData(), n = $("#jsAddEditDescriptionId").val(); t.trim() && "" !== $("<div>").html(t).text().trim() ? (i = i.map((function (e) { return e.question_id === n && (e.description = t, e.plainDescription = $("<div>").html(t).text().trim(), e.slug = getSlug(t)), e })), c("basic"), s()) : _error("Description cannot be empty.") })), $(document).on("click", ".jsRemoveDescription", (function (e) { e.preventDefault(); const t = $(this).closest(".jsQuestionDescription").data("id").replace("desc_", ""); _confirm("Do you want to delete this question?", (function () { o(t) })) })), $(document).on("click", ".jsBackToAddCoursePage", (function (e) { e.preventDefault(), c("basic") })), $(document).on("click", ".jsRemoveQuestion", (function (e) { e.preventDefault(); const t = $(this).closest(".jsQuestionView").data("id"); _confirm("Do you want to delete this question?", (function () { o(t) })) })), $(document).on("click", ".jsEditQuestion", (function (e) { e.preventDefault(), e.stopPropagation(); const t = a($(this).closest(".jsQuestionView").data("id")); c("edit_question"), loadEditQuestionView(t, (function (e) { !function (e, t) { i = i.map((function (n) { return n.question_id === t ? e : n })) }(e, e.question_id), s(), c("basic") })) })), window.startTemplateAddProcess = function () { t = $.msSiteModal(), t.loader(!0).open(), async function () { 0; n = { title: "", description: "", category: "", is_recurring: !1, recur_type: "days", recur_number: 0, available_date: 0 }; try { const e = await makeSecureCallToApiServer("surveys/templates/view", { method: "GET" }); t.setContent(e), $("#jsTemplateTitle").val(n.title), $("#jsTemplateDescription").val(n.description), $("#jsTemplateRecur").prop("checked", n.is_recurring), $("#jsTemplateRecurNumber").val(n.recur_number), $("#jsTemplateRecurType option[value='" + n.recur_type + "']").prop("selected", !0), 0 == n.is_recurring ? $(".jsRecurringSurveyBox").addClass("hidden") : $(",jsRecurringSurveyBox").removeClass("hidden"), s(), t.loader(!1), c("basic"), $("#jsAddQuestionsArea").sortable({ stop: function (e) { !function () { let e = $("#jsAddQuestionsArea").sortable("toArray", { attribute: "data-id" }), t = [], n = ""; e.map((function (e) { if ("desc_" === e.substr(0, 5)) question = a(e.replace("desc_", "")), t.push(question), n = question.plainDescription; else { let i = a(e); i.tag = n, t.push(i) } })), i = t }() }, onchange: function (e) { } }) } catch (e) { handleErrorResponse(e), t.closeModal() } }() } }));