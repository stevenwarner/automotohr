$((function(){let selectedEmployeeId=employeeId,selectedEmployeeName=employeeName;function fetchEmployeePolicies(){return new Promise((res,rej)=>{$.post(handlerURL,{action:"get_employee_policies",companyId:companyId,employerId:employerId,employeeId:selectedEmployeeId},(function(resp){res(resp)}))})}$(document).on("click",".jsBreakdownRequest",(function(e){e.preventDefault();let employeeId=$(this).data("id");selectedEmployeeId=employeeId,Modal({Id:"breakdownModal",Title:`Time-off for ${selectedEmployeeName}`,Body:"",Loader:"breakdownModalLoader"},async()=>{let bodyText='\n            <div>\n            <div class="table-responsive">\n                <table class="table table-striped">\n                    <thead>\n                        <tr>\n                            <th>Policy</th>\n                            <th>Allowed Time</th>\n                            <th>Consumed Time</th>\n                            <th>Remaining Time</th>\n                        </tr>\n                    </thead>\n                    <tbody id="jsEmployeePolicyModalBody"></tbody>\n                </table>\n            </div>\n            </div>\n            ';$("#breakdownModal").find(".csModalBody").append(bodyText);let policies=await fetchEmployeePolicies();policies=policies.Data;let policyList={};policies.map((function(policy){policyList.hasOwnProperty(policy.Category)||(policyList[policy.Category]=[]),policyList[policy.Category].push(policy)})),policyList=sortObjectByKey(policyList);let policyOptions="";Object.keys(policyList).map(p=>{let policy=policyList[p];policyOptions+=`<tr><th colspan="7">${p}</th></tr>`,policy.map(pi=>{""==pi.Reason&&(policyOptions+=`\n                <tr ${""!=pi.Reason?'class="bg-danger"':""}>\n                <td>${pi.Title} (<strong class="text-${1==pi.CategoryType?"success":"danger"}">${1==pi.CategoryType?"Paid":"Unpaid"}</strong>) ${""!=pi.Reason?` <i class="fa fa-question-circle jsPopover" title="Why?" data-content="${pi.Reason}"></i>`:""}</td>\n                <td>${void 0!==pi.AllowedTime&&0!=pi.AllowedTime.M.minutes&&""==pi.Reason&&"probation"!=pi.EmploymentStatus?pi.AllowedTime.text:"Unlimited"}</td>\n                <td>${void 0!==pi.ConsumedTime?pi.ConsumedTime.text:"0"}</td>\n                <td>${void 0!==pi.RemainingTime&&void 0!==pi.AllowedTime&&0!=pi.AllowedTime.M.minutes?pi.RemainingTime.text:"Unlimited"}</td>\n                </tr>\n                `)})}),$("#jsEmployeePolicyModalBody").append(policyOptions),ml(!1,"breakdownModalLoader")})}));var sortObjectByKey=function(obj){var keys=[],sorted_obj={};for(var key in obj)obj.hasOwnProperty(key)&&keys.push(key);return keys.sort(),jQuery.each(keys,(function(i,key){sorted_obj[key]=obj[key]})),sorted_obj}}));