$((function(){let selectedEmployeeId=employeeId,selectedEmployeeName=employeeName,selectedPolicy=0,currentLoader="",cOBJ={policyId:0,startDate:0,endDate:0,dateRows:"",status:0,reason:0,comment:0,sendEmailNotification:0,fromAdmin:1};function getModalBody(type){return new Promise(res=>{$.post(handlerURL,{action:"get_modal",companyId:companyId,employerId:employerId,employeeId:employeeId,type:type,formLMS:null!==window.location.pathname.match(/(lms)|(create_employee)|(employee_management_system)|(dashboard)/gi)?1:0},resp=>{res(resp)})})}function getEmployeePolicies(){return new Promise(res=>{$.post(handlerURL,{action:"get_employee_policies_with_approvers",companyId:companyId,employerId:employerId,employeeId:selectedEmployeeId},resp=>{res(resp)})})}function getSideBarPolicies(){$(".jsAsOfTodayPolicies").html(""),$.post(handlerURL,{action:"get_employee_policies_by_date",companyId:companyId,employerId:employerId,employeeId:selectedEmployeeId,fromDate:$("#jsStartDate").val()},resp=>{window.timeoff.cPolicies=resp.Data,$(".jsCreateTimeOffBTN").prop("disabled",!1),$("#jsEndDate").prop("disabled",!1),$("#jsAddPolicy").prop("disabled",!1);let newPolicies=[];if(resp.Data.length>0){let rows="";resp.Data.map(policy=>{""==policy.Reason&&(newPolicies.push(policy),rows+=`\n                        <div class="p10">\n                        <strong>${policy.Title} (<strong class="text-${1==policy.categoryType?"success":"danger"}">${1==policy.categoryType?"Paid":"Unpaid"}</strong>)</strong>\n                        <br />\n                        <span>(${policy.Category})</span>  \n                        <br />\n                        <span>${policy.IsUnlimited?"Unlimited":policy.RemainingTime.text} remaining</span>\n                        <br />\n                        <span>${policy.IsUnlimited?"Unlimited":policy.ConsumedTime.text} scheduled</span>\n                        <br />\n                        <span>Employment status: ${ucwords(policy.EmployementStatus)}</span>  \n                        </div>\n                        <hr />\n                        `)}),window.timeoff.cPolicies=newPolicies,$("#jsAsOfTodayPolicies").html(rows)}0==window.timeoff.cPolicies.length&&($("#jsAsOfTodayPolicies").html('<div class="alert alert-success">No policies found.</div>'),$(".jsCreateTimeOffBTN").prop("disabled",!0),$("#jsEndDate").prop("disabled",!0),$("#jsAddPolicy").prop("disabled",!0))})}function unavailable(date){var checkOffDays=void 0===policyOffDays?timeOffDays:policyOffDays,dmy=moment(date).format("MM-DD-YYYY");let d=moment(date).format("dddd").toString().toLowerCase(),t=1;return t=-1!==$.inArray(d,checkOffDays)?{work_on_holiday:0,holiday_title:"Weekly off"}:inObject(dmy,holidayDates),-1==t?[!0,""]:1==t.work_on_holiday?[!0,"set_disable_date_color",t.holiday_title]:[!1,"",t.holiday_title]}async function loadAdminProcess(){const resp=await fetchCompanyEmployees();if(!0===resp.Redirect)return void alertify.alert("WARNING!","Your session expired. Please, re-login to continue.",()=>{window.location.reload()});if(0==resp.Status||0==resp.Data.length)return void alertify.alert("WARNING!","We are unable to find any active employees.",()=>{});let options='<option value="0">Please select an employee</option>';window.timeoff.companyEmployees=resp.Data,resp.Data.map(employee=>{options+=`<option value="${employee.user_id}">${remakeEmployeeName(employee)}</option>`}),Modal({Id:"addAdminModal",Title:"Create a time-off",Body:`\n                <div class="col-sm-6">\n                <label>Select an employee <span class="cs-required">*</span></label>\n                <select id="jsAddAdminModalList">${options}</select>\n                </div>\n                <div class="col-sm-12">\n                    <hr />\n                </div>\n                <div class="clearfix"></div>\n            `,Buttons:['<button class="btn btn-orange btn-theme jsCreateTimeOffBalanceAdmin" style="margin-right: 10px;" title="See employee balance" placement="left"><i class="fa fa-balance-scale" aria-hidden="true"></i>&nbsp;View Balance History</button>','<button class="btn btn-black jsCreateTimeOffBalanceBackAdmin dn" style="margin-right: 10px;" ><i class="fa fa-long-arrow-left" aria-hidden="true"></i>&nbsp;Back To Create</button>','<button class="btn btn-orange btn-theme jsCreateTimeOffBTN"><i class="fa fa-plus-circle" aria-hidden="true"></i>&nbsp;Create</button>'],Loader:"addAdminModalLoader",Ask:!1},async()=>{$("#jsAddAdminModalList").select2({templateSelection:opt=>{if($(".jsAddTimeOff").remove(),$(".jsCreateTimeOffBTN").addClass("dn"),0==opt.id)return opt.text;const employeeDetail=getUserById(opt.id,resp.Data,"user_id");return selectedEmployeeId=employeeDetail.user_id,selectedEmployeeName=`${employeeDetail.first_name} ${employeeDetail.last_name}`,ml(!0,"addAdminModalLoader"),loadAddSectionPage("addAdminModalLoader","addAdminModal"),$(`<span><img  style="padding: 5px; margin-left: 5px;" src="${""==employeeDetail.image||null==employeeDetail.image?awsURL+"test_file_01.png":awsURL+employeeDetail.image}" width="60px" /> <span>${opt.text}</span></span>`)}}),ml(!1,"addAdminModalLoader")})}function fetchCompanyEmployees(){return new Promise(res=>{$.post(handlerURL,{action:"get_company_employees",companyId:companyId,employerId:employerId,employeeId:selectedEmployeeId},resp=>{res(resp)})})}async function loadAddSectionPage(loader,modalId){if(policyOffDays=void 0,void 0===window.timeoff.companyEmployees){const resp1=await fetchCompanyEmployees();window.timeoff.companyEmployees=resp1.Data}$("#addAdminModal").find(".csModalHeaderTitle span:nth-child(1)").text("Create a time-off"),$("#addModal").find(".csModalHeaderTitle span:nth-child(1)").text($("#addModal").find(".csModalHeaderTitle span:nth-child(1)").text().replace("Balance History ","Create Time-off")),$(".jsCreateTimeOffBalanceBack").hide(0),$(".jsCreateTimeOffBalanceBackAdmin").hide(0),$(".jsCreateTimeOffBalance").show(0),$(".jsCreateTimeOffBalanceAdmin").show(0),$(".jsCreateTimeOffBTN").show(0),currentLoader=loader;const resp=await getEmployeePolicies(),policies=resp.Data.Policies;if($(`#${modalId}`).find(".csModalBody .alert").remove(),0===policies.length)return $(".jsAddTimeOff").remove(),$(`#${modalId}`).find(".csModalBody").append('<div class="alert alert-success text-center">We are unable to find policies against this employee.</div>'),void ml(!1,loader);let c=policies.length,d=0,newPolicies={};if(window.timeoff.cPolicies=policies,policies.map(policy=>{""==policy.Reason?(void 0===newPolicies[policy.Category]&&(newPolicies[policy.Category]=[]),newPolicies[policy.Category].push(policy)):d++}),c==d)return $(".jsAddTimeOff").remove(),$(`#${modalId}`).find(".csModalBody").append('<div class="alert alert-success text-center">We are unable to find policies against this employee.</div>'),void ml(!1,loader);let policyRows='<option value="0" selected="true">[Select a policy]</option>';$.each(newPolicies,(category,policies)=>{policyRows+=`<optgroup label="${category}">`,policies.map(policy=>{policyRows+=`<option value="${policy.PolicyId}">${policy.Title} (<strong class="text-${1==policy.categoryType?"success":"danger"}">${1==policy.categoryType?"Paid":"Unpaid"}</strong>)</option>`}),policyRows+="</optgroup>"});const bodyText=await getModalBody("add");$(".jsAddTimeOff").remove(),$(`#${modalId}`).find(".csModalBody").append(bodyText),$("#jsAddPolicy").html(policyRows),$("#jsAddPolicy").select2(),0!=selectedPolicy&&$("#jsAddPolicy").select2("val",selectedPolicy),$("#jsStartDate").datepicker({format:"mm-dd-yyyy",changeYear:!0,changeMonth:!0,beforeShowDay:unavailable,onSelect:date=>{$("#jsEndDate").datepicker("option","minDate",date),getSideBarPolicies(),remakeRangeRows("#jsStartDate","#jsEndDate",".jsDurationBox")}}),$("#jsEndDate").datepicker({format:"mm-dd-yyyy",changeYear:!0,changeMonth:!0,beforeShowDay:unavailable,onSelect:date=>{remakeRangeRows("#jsStartDate","#jsEndDate",".jsDurationBox")}}),$("#js-vacation-return-date").datepicker({format:"mm-dd-yyyy",changeYear:!0,changeMonth:!0,minDate:1,beforeShowDay:unavailable}),$("#js-bereavement-return-date").datepicker({format:"mm-dd-yyyy",changeYear:!0,changeMonth:!0,minDate:1,beforeShowDay:unavailable}),$("#js-compensatory-return-date").datepicker({format:"mm-dd-yyyy",changeYear:!0,changeMonth:!0,minDate:1,beforeShowDay:unavailable}),$("#js-compensatory-start-time").datepicker({format:"g:i A",formatTime:"g:i A",step:15}),$("#js-compensatory-end-time").datepicker({format:"g:i A",formatTime:"g:i A",step:15}),null!==window.location.pathname.match(/(lms)|(employee_management_system)|(dashboard)/gi)?($("#jsComment").parent().hide(),$(".jsEmailBoxAdd").hide(),$("#jsStatus").html('<option value="pending">Pending</option>').parent().hide(0),$("#jsStartDate").datepicker("option","minDate",-1),$("#jsEndDate").datepicker("option","minDate",-1)):$("#jsStatus").select2({minimumResultsForSearch:5}),CKEDITOR.config.toolbar=[["Bold","Italic","Underline"]],$("#jsReason").length>0&&CKEDITOR.replace("jsReason"),$("#jsComment").length>0&&CKEDITOR.replace("jsComment"),window.timeoff.companyEmployees.map((function(emp){if(emp.user_id==selectedEmployeeId){var employeeJoinedAt=null==emp.joined_at?emp.joined_at:emp.registration_date;employeeJoinedAt=moment(employeeJoinedAt,"YYYY-MM-DD").format(timeoffDateFormat),$("#jsEmployeeInfoAdd").html(`\n                <figure>\n                    <img src="${getImageURL(emp.image)}"\n                        class="csRadius50">\n                    <div class="csTextBox">\n                        <p>${emp.first_name} ${emp.last_name}</p>\n                        <p class="csTextSmall"> ${remakeEmployeeName(emp,!1)}</p>\n                        <p class="csTextSmall">${emp.email}</p>\n                        <p class="csTextSmall">${emp.anniversary_text}</p>\n                    </div>\n                </figure>\n                <div class="clearfix"></div>\n                `)}})),getSideBarPolicies(selectedEmployeeId),setApproversView(resp.Data.Approvers),$(".jsCreateTimeOffBTN").removeClass("dn"),loadTitles(),setUpcomingTimeOffs(selectedEmployeeId),ml(!1,loader)}function setApproversView(approvers){if(0===approvers.length)return void $("#jsApproversListingAdd").html("<p>No approvers found.</p>");let rows="",mRows="";approvers.map(approver=>{let msg=`${remakeEmployeeName(approver)}`;rows+=`\n                <div class="csApproverBox" title="Approver" data-content="${msg}">\n                    <img src="${null==approver.profile_picture||""==approver.profile_picture?awsURL+"test_file_01.png":awsURL+approver.profile_picture}" />\n                </div>\n            `,mRows+=`\n                <div class="csApproverBox">\n                    <div class="employee-info">            \n                        <figure>                \n                            <img src="${null==approver.profile_picture||""==approver.profile_picture?awsURL+"test_file_01.png":awsURL+approver.profile_picture}" />          \n                        </figure>            \n                        <div class="text">                \n                            <h4>${msg}</h4>                \n                            <p><a href="http://automotohr.local/employee_profile/${approver.userId}" target="_blank">Id: ${getEmployeeId(approver.userId,approver.employee_number)}</a></p>            \n                        </div>        \n                    </div>\n                </div>\n            `}),$("#jsApproversListingMobileAdd").html(mRows),$("#jsApproversListingAdd").html(rows),$(".csApproverBox").popover({html:!0,trigger:"hover",placement:"top"})}function getSelectedPolicy(policyId){if(0===window.timeoff.cPolicies.length)return[];let selectedPolicy=[];return window.timeoff.cPolicies.map(policy=>{policy.PolicyId==policyId&&(selectedPolicy=policy)}),selectedPolicy}$(document).on("click",".jsCreateTimeOffBTN",(function(e){let policy;if(e.preventDefault(),0==getSelectedPolicy(getField("#jsAddPolicy")).length)return void alertify.alert("WARNING!","You don't have any policies. Please select a different date.",()=>{});if(cOBJ.policyId=getField("#jsAddPolicy"),cOBJ.startDate=getField("#jsStartDate"),cOBJ.endDate=getField("#jsEndDate"),cOBJ.status=getField("#jsStatus"),cOBJ.reason=CKEDITOR.instances.jsReason.getData(),cOBJ.comment=CKEDITOR.instances.jsComment.getData(),cOBJ.sendEmailNotification=getField(".js-send-email:checked"),cOBJ.dateRows=getRequestedDays(".jsDurationBox"),0==cOBJ.policyId)return void alertify.alert("WARNING!","Please select a policy.",()=>{});if(0==cOBJ.startDate)return void alertify.alert("WARNING!","Please select the start date.",()=>{});if(0==cOBJ.endDate)return void alertify.alert("WARNING!","Please select an end date.",()=>{});if(null===window.location.pathname.match(/(lms)|(employee_management_system)|(dashboard)/gi)&&"pending"==cOBJ.status)return void alertify.alert("WARNING!","Please, either select approve or reject.",()=>{});if(cOBJ.dateRows.error)return;let selectedPolicy=getPolicy(cOBJ.policyId,window.timeoff.cPolicies);if(console.log(selectedPolicy),0==selectedPolicy.IsUnlimited){if(selectedPolicy.RemainingTimeWithNegative.M.minutes<=0)return void alertify.alert("WARNING!","You don't have any time left against this policy.",()=>{});if(cOBJ.dateRows.totalTime>selectedPolicy.RemainingTimeWithNegative.M.minutes)return void alertify.alert("WARNING!",`Requested time-off can not be greater than the allowed time i.e. "${selectedPolicy.RemainingTimeWithNegative.text}"`,()=>{})}cOBJ.fromAdmin=1,null!==window.location.pathname.match(/(lms)|(dashboard)/gi)&&(cOBJ.fromAdmin=0),ml(!0,currentLoader),$.post(handlerURL,Object.assign({action:"create_timeoff",companyId:companyId,employerId:employerId,employeeId:selectedEmployeeId},cOBJ),resp=>{if(!1===resp.Status)return ml(!1,currentLoader),void alertify.alert("WARNING!",resp.Response,()=>{});ml(!1,currentLoader),alertify.alert("SUCCESS!",resp.Response,()=>{$(".jsModalCancel").removeAttr("data-ask"),$(".jsModalCancel").trigger("click"),window.location.reload()})})})),$(document).on("click",".jsCreateRequest",(function(e){if(e.preventDefault(),timeRowsOBJ={},selectedPolicy=0,void 0!==$(this).prop("id")&&""!=$(this).prop("id"))return void loadAdminProcess();let employeeId=0,employeeName="";void 0!==$(this).data("id")?(employeeId=selectedEmployeeId,employeeName=selectedEmployeeName):(employeeId=$(this).closest(".jsBox").data("id"),employeeName=$(this).closest(".jsBox").data("name")),selectedEmployeeId=employeeId,selectedEmployeeName=employeeName,void 0!==$(this).data("policyid")&&(selectedPolicy=$(this).data("policyid")),Modal({Id:"addModal",Title:`Create Time-off for ${selectedEmployeeName}`,Body:"",Buttons:['<button class="btn btn-orange btn-theme jsCreateTimeOffBalance" style="margin-right: 10px;" title="See employee balance" placement="left"><i class="fa fa-balance-scale" aria-hidden="true"></i>&nbsp;View Balance History</button>','<button class="btn btn-black jsCreateTimeOffBalanceBack dn" style="margin-right: 10px;" ><i class="fa fa-long-arrow-left" aria-hidden="true"></i>&nbsp;Back To Create</button>','<button class="btn btn-orange btn-theme jsCreateTimeOffBTN"><i class="fa fa-plus-circle" aria-hidden="true"></i>&nbsp;Create</button>'],Loader:"addModalLoader",Ask:!1},async()=>{loadAddSectionPage("addModalLoader","addModal")})})),$(document).on("click",".jsCreateTimeOffBalance",(function(event){event.preventDefault(),null!=selectedEmployeeId?($(this).hide(0),$(".jsCreateTimeOffBalanceBack").show(0),$(".jsCreateTimeOffBTN").hide(0),$("#addModal").find('[data-page="main"]').hide(0),$("#addModal").find('[data-page="balance-view"]').show(0),$("#addModal").find(".csModalHeaderTitle span:nth-child(1)").text($("#addModal").find(".csModalHeaderTitle span:nth-child(1)").text().trim().replace("Create Time-off","Balance History ")),$.post(handlerURL,{action:"get_employee_balance_history",companyId:companyId,employerId:employerId,employeeId:selectedEmployeeId}).done((function(resp){var rows="";if(0===resp.Data.length)rows+="<tr>",rows+='   <td colspan="6">',rows+='       <p class="alert alert-info text-center">',rows+="          No balance history found.",rows+="       </p>",rows+="   </td>",rows+="</tr>";else{var totalTOs=0,totalTimeTaken={},totalManualTime={};void 0!==resp.Data[0].timeoff_breakdown.active.hour&&(totalTimeTaken.hour=0,totalManualTime.hour=0),void 0!==resp.Data[0].timeoff_breakdown.active.minutes&&(totalTimeTaken.minutes=0,totalManualTime.minutes=0),resp.Data.map((function(balance){var startDate="",endDate="",employeeName="",employeeRole="";0==balance.is_manual&&1==balance.is_allowed?(startDate=moment(balance.effective_at,"YYYY-MM-DD").format(timeoffDateFormat),endDate="",employeeName="-",employeeRole=""):1==balance.is_manual?(startDate=moment(balance.effective_at,"YYYY-MM-DD").format(timeoffDateFormat),endDate=moment(balance.effective_at,"YYYY-MM-DD").format(timeoffDateFormat),employeeName=balance.first_name+" "+balance.last_name,employeeRole=remakeEmployeeName(balance,!1),void 0!==balance.timeoff_breakdown.active.hours&&(void 0===totalManualTime.hours&&(totalManualTime.hours=0),totalManualTime.hours+=parseInt(balance.timeoff_breakdown.active.hours)),void 0!==balance.timeoff_breakdown.active.minutes&&(void 0===totalManualTime.minutes&&(totalManualTime.minutes=0),totalManualTime.minutes+=parseInt(balance.timeoff_breakdown.active.minutes))):(totalTOs++,startDate=moment(balance.request_from_date,"YYYY-MM-DD").format(timeoffDateFormat),endDate=moment(balance.request_to_date,"YYYY-MM-DD").format(timeoffDateFormat),employeeName=balance.approverName,employeeRole=balance.approverRole,void 0!==balance.timeoff_breakdown.active.hours&&(void 0===totalTimeTaken.hours&&(totalTimeTaken.hours=0),totalTimeTaken.hours+=parseInt(balance.timeoff_breakdown.active.hours)),void 0!==balance.timeoff_breakdown.active.minutes&&(void 0===totalTimeTaken.minutes&&(totalTimeTaken.minutes=0),totalTimeTaken.minutes+=parseInt(balance.timeoff_breakdown.active.minutes))),rows+="<tr>",rows+="   <td>",rows+="       <strong>",rows+=employeeName+"<br>",rows+="       </strong>",rows+=employeeRole,rows+="   </td>",rows+="   <td>",rows+="       <strong>"+balance.title+"</strong>",rows+="       <p>"+startDate+(""!=endDate?" - "+endDate:"")+"</p>",rows+="   </td>",rows+=' <td class="'+(0==balance.is_added?"text-danger":"text-success")+'"><i class="fa fa-arrow-'+(0==balance.is_added?"down ":"up")+'"></i>&nbsp;'+balance.timeoff_breakdown.text+"</td>",rows+="   <td>",rows+=""!=balance.note?balance.note:"-",rows+="   </td>",rows+="   <td>",rows+=moment(balance.created_at,"YYYY-MM-DD").format(timeoffDateFormatWithTime),rows+="   </td>",rows+="   <td>",rows+='       <strong class="text-'+(1==balance.is_manual?"success":"danger")+'">'+(1==balance.is_manual?"Yes":"No")+"</strong>",rows+="   </td>",rows+="</tr>",rows+="<tr>",rows+='   <td colspan="6">',0==balance.is_manual&&1==balance.is_allowed?rows+="       <p><strong>Note</strong>: A balance of <b>"+balance.added_time/60+'</b> hours is available against policy <b>"'+balance.title+'"</b> effective from <b>'+moment(balance.effective_at,"YYYY-MM-DD").format(timeoffDateFormat)+"</b>":rows+="       <p><strong>Note</strong>: <strong>"+employeeName+"</strong> has "+(1==balance.is_manual?1==balance.is_added?"added balance":"subtracted balance":"approved time off")+' against policy "<strong>'+balance.title+'</strong>" on <strong>'+moment(balance.created_at,"YYYY-MM-DD").format(timeoffDateFormatWithTime)+"</strong> which will take effect "+(startDate==endDate?"on ":" from ")+" <strong>"+startDate+(startDate!=endDate?" to  "+endDate:"")+"</strong>.</p>",rows+="   </td>",rows+="</tr>"})),$(".jsCreateTimeOffNumber").text(totalTOs),$(".jsCreateTimeOffTimeTaken").text(getText(totalTimeTaken)),$(".jsCreateTimeOffManualAllowedTime").text(getText(totalManualTime))}$("#jsCreateTimeoffBalanceBody").html(rows),ml(!1,"balance-view")}))):alertify.alert("Warning!","Please, select an employee.")})),$(document).on("click",".jsCreateTimeOffBalanceBack",(function(event){event.preventDefault(),$(this).hide(0),$(".jsCreateTimeOffBalance").show(0),$(".jsCreateTimeOffBTN").show(0),$("#addModal").find('[data-page="balance-view"]').hide(0),$("#addModal").find('[data-page="main"]').show(0),$("#addModal").find(".csModalHeaderTitle span:nth-child(1)").text($("#addModal").find(".csModalHeaderTitle span:nth-child(1)").text().trim().replace("Balance History ","Create Time-off"))})),$(document).on("click",".jsCreateTimeOffBalanceAdmin",(function(event){event.preventDefault(),null!=selectedEmployeeId?($(this).hide(0),$(".jsCreateTimeOffBalanceBackAdmin").show(0),$(".jsCreateTimeOffBTN").hide(0),$("#addAdminModal").find('[data-page="main"]').hide(0),$("#addAdminModal").find('[data-page="balance-view"]').show(0),$("#addAdminModal").find(".csModalHeaderTitle span:nth-child(1)").text($("#addAdminModal").find(".csModalHeaderTitle span:nth-child(1)").text().trim().replace("Create a time-off","Balance History")),$.post(handlerURL,{action:"get_employee_balance_history",companyId:companyId,employerId:employerId,employeeId:selectedEmployeeId}).done((function(resp){var rows="";if(0===resp.Data.length)rows+="<tr>",rows+='   <td colspan="6">',rows+='       <p class="alert alert-info text-center">',rows+="          No balance history found.",rows+="       </p>",rows+="   </td>",rows+="</tr>";else{var totalTOs=0,totalTimeTaken={},totalManualTime={};void 0!==resp.Data[0].timeoff_breakdown.active.hour&&(totalTimeTaken.hour=0,totalManualTime.hour=0),void 0!==resp.Data[0].timeoff_breakdown.active.minutes&&(totalTimeTaken.minutes=0,totalManualTime.minutes=0),resp.Data.map((function(balance){var startDate="",endDate="",employeeName="",employeeRole="";0==balance.is_manual&&1==balance.is_allowed?(startDate=moment(balance.effective_at,"YYYY-MM-DD").format(timeoffDateFormat),endDate="",employeeName="-",employeeRole=""):1==balance.is_manual?(startDate=moment(balance.effective_at,"YYYY-MM-DD").format(timeoffDateFormat),endDate=moment(balance.effective_at,"YYYY-MM-DD").format(timeoffDateFormat),employeeName=balance.first_name+" "+balance.last_name,employeeRole=remakeEmployeeName(balance,!1),void 0!==balance.timeoff_breakdown.active.hours&&(void 0===totalManualTime.hours&&(totalManualTime.hours=0),totalManualTime.hours+=parseInt(balance.timeoff_breakdown.active.hours)),void 0!==balance.timeoff_breakdown.active.minutes&&(void 0===totalManualTime.minutes&&(totalManualTime.minutes=0),totalManualTime.minutes+=parseInt(balance.timeoff_breakdown.active.minutes))):(totalTOs++,startDate=moment(balance.request_from_date,"YYYY-MM-DD").format(timeoffDateFormat),endDate=moment(balance.request_to_date,"YYYY-MM-DD").format(timeoffDateFormat),employeeName=balance.approverName,employeeRole=balance.approverRole,void 0!==balance.timeoff_breakdown.active.hours&&(void 0===totalTimeTaken.hours&&(totalTimeTaken.hours=0),totalTimeTaken.hours+=parseInt(balance.timeoff_breakdown.active.hours)),void 0!==balance.timeoff_breakdown.active.minutes&&(void 0===totalTimeTaken.minutes&&(totalTimeTaken.minutes=0),totalTimeTaken.minutes+=parseInt(balance.timeoff_breakdown.active.minutes))),rows+="<tr>",rows+="   <td>",rows+="       <strong>",rows+=employeeName+"<br>",rows+="       </strong>",rows+=employeeRole,rows+="   </td>",rows+="   <td>",rows+="       <strong>"+balance.title+"</strong>",rows+="       <p>"+startDate+(""!=endDate?" - "+endDate:"")+"</p>",rows+="   </td>",rows+=' <td class="'+(0==balance.is_added?"text-danger":"text-success")+'"><i class="fa fa-arrow-'+(0==balance.is_added?"down ":"up")+'"></i>&nbsp;'+balance.timeoff_breakdown.text+"</td>",rows+="   <td>",rows+=""!=balance.note?balance.note:"-",rows+="   </td>",rows+="   <td>",rows+=moment(balance.created_at,"YYYY-MM-DD").format(timeoffDateFormatWithTime),rows+="   </td>",rows+="   <td>",rows+='       <strong class="text-'+(1==balance.is_manual?"success":"danger")+'">'+(1==balance.is_manual?"Yes":"No")+"</strong>",rows+="   </td>",rows+="</tr>",rows+="<tr>",rows+='   <td colspan="6">',0==balance.is_manual&&1==balance.is_allowed?rows+="       <p><strong>Note</strong>: A balance of <b>"+balance.added_time/60+'</b> hours is available against policy <b>"'+balance.title+'"</b> effective from <b>'+moment(balance.effective_at,"YYYY-MM-DD").format(timeoffDateFormat)+"</b>":rows+="       <p><strong>Note</strong>: <strong>"+employeeName+"</strong> has "+(1==balance.is_manual?1==balance.is_added?"added balance":"subtracted balance":"approved time off")+' against policy "<strong>'+balance.title+'</strong>" on <strong>'+moment(balance.created_at,"YYYY-MM-DD").format(timeoffDateFormatWithTime)+"</strong> which will take effect "+(startDate==endDate?"on ":" from ")+" <strong>"+startDate+(startDate!=endDate?" to  "+endDate:"")+"</strong>.</p>",rows+="   </td>",rows+="</tr>"})),$(".jsCreateTimeOffNumber").text(totalTOs),$(".jsCreateTimeOffTimeTaken").text(getText(totalTimeTaken)),$(".jsCreateTimeOffManualAllowedTime").text(getText(totalManualTime))}$("#jsCreateTimeoffBalanceBody").html(rows),ml(!1,"balance-view"),console.log(resp)}))):alertify.alert("Warning!","Please, select an employee.")})),$(document).on("click",".jsCreateTimeOffBalanceBackAdmin",(function(event){event.preventDefault(),$(this).hide(0),$(".jsCreateTimeOffBalanceAdmin").show(0),$(".jsCreateTimeOffBTN").show(0),$("#addAdminModal").find('[data-page="balance-view"]').hide(0),$("#addAdminModal").find('[data-page="main"]').show(0),$("#addAdminModal").find(".csModalHeaderTitle span:nth-child(1)").text($("#addAdminModal").find(".csModalHeaderTitle span:nth-child(1)").text().trim().replace("Balance History","Create a time-off"))})),$(document).on("change","#jsAddPolicy",(function(){if(null!==$(this).val()){var singlePolicy=getPolicy($(this).val(),window.timeoff.cPolicies);null==singlePolicy.OffDays?policyOffDays=void 0:policyOffDays=singlePolicy.OffDays.split(",")}else policyOffDays=void 0}))}));