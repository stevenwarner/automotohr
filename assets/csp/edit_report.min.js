$((function () { let e = $(".jsAddExternalBody .jsEER").length, t = null, a = 1, s = 1, n = [], i = []; const o = { allowedTypes: ["jpg", "jpeg", "png", "gif", "webp", "rtf", "pdf", "doc", "docx", "pptx", "ppt", "xls", "xlsx", "csv", "mov", "mp4", "webm", "wav", "mp3"], fileLimit: "200mb", allowLinks: !0, allowCapture: !0 }; function l(e) { $.ajax({ url: baseUrl("compliance_safety_reporting/file/view/" + e), method: "GET" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { $("#jsFileViewModalBody").html(e.view), $("#jsFileViewModalTitle").html(e.data.title), ml(!1, "jsFileViewModalLoader") })) } function d(e) { if (!e) return "Unknown"; const t = e.name.toLowerCase(), a = e.type; let s = "file"; return a.startsWith("audio/") ? s = "audio" : a.startsWith("video/") ? s = "video" : a.startsWith("image/") ? s = "image" : a.startsWith("application/") && ("application/pdf" === a || a.startsWith("application/msword") || "application/vnd.openxmlformats-officedocument.wordprocessingml.document" === a) && (s = "document"), "file" === s && (t.match(/\.(pdf|doc|docx|txt|xls|xlsx|ppt|pptx)$/) ? s = "document" : t.match(/\.(mp3|wav|ogg|flac|aac|m4a)$/) ? s = "audio" : t.match(/\.(mp4|mkv|avi|mov|wmv|flv|webm)$/) && (s = "video")), s } function r() { null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/" + getSegment(2) + "/emails/send"), method: "POST" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { _success(e.message) }))) } function c(e) { null !== t && t.abort(), t = $.ajax({ url: baseUrl("compliance_safety_reporting/issues/" + e), method: "GET" }).always((function () { t = null })).fail(handleErrorResponse).done((function (e) { $("#jsAddIssueBox").html(e.view), $("#jsAddIssueModal .jsAddIssueBtn").removeClass("hidden") })) } function u() { null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/delete_issue_from_report/" + issueId), method: "Delete" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { _success(e.message, (function () { window.location.reload() })) }))) } function l(e) { $.ajax({ url: baseUrl("compliance_safety_reporting/file/view/" + e), method: "GET" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { $("#jsFileViewModalBody").html(e.view), $("#jsFileViewModalTitle").html(e.data.title), ml(!1, "jsFileViewModalLoader") })) } function d(e) { if (!e) return "Unknown"; const t = e.name.toLowerCase(), a = e.type; let s = "file"; return a.startsWith("audio/") ? s = "audio" : a.startsWith("video/") ? s = "video" : a.startsWith("image/") ? s = "image" : a.startsWith("application/") && ("application/pdf" === a || a.startsWith("application/msword") || "application/vnd.openxmlformats-officedocument.wordprocessingml.document" === a) && (s = "document"), "file" === s && (t.match(/\.(pdf|doc|docx|txt|xls|xlsx|ppt|pptx)$/) ? s = "document" : t.match(/\.(mp3|wav|ogg|flac|aac|m4a)$/) ? s = "audio" : t.match(/\.(mp4|mkv|avi|mov|wmv|flv|webm)$/) && (s = "video")), s } $(".jsDeleteReportBtn").click((function (e) { e.preventDefault(); const t = $(this).data("id"); _confirm("Are you sure you want to delete this report? This action is not revertible.", (function () { !function (e) { const t = callButtonHook($(".jsDeleteReportBtn"), !0); $.ajax({ url: baseUrl(`compliance_safety_reporting/report/${e}`), method: "DELETE" }).always((function () { callButtonHook(t, !1) })).fail(handleErrorResponse).done((function (e) { _success(e.message, (function () { window.location.href = baseUrl("compliance_safety_reporting/overview") })) })) }(t) })) })), $("#report_documents").msFileUploader(o), 0 != e && $(".jsAddExternalBody .jsEER").each((function (e) { $(`input[name="external_employees[${e}]['name']"]`).rules("add", { required: !0, messages: { required: "Please enter the name" } }), $(`input[name="external_employees[${e}]['email']"]`).rules("add", { required: !0, email: !0, messages: { required: "Please enter the email", email: "Please enter a valid email address" } }) })), $("#report_status").select2({ minimumResultsForSearch: -1 }), $("#report_note_type").select2({ minimumResultsForSearch: -1 }), $("#jsReportIncidentType").select2({}), CKEDITOR.replace("report_note"), $("#report_date").datetimepicker({ format: "m/d/Y", datepicker: !0, timepicker: !1, changeYear: !0, changeMonth: !0 }), $(".start_date").datetimepicker({ format: "m/d/Y", datepicker: !0, timepicker: !1, changeYear: !0, changeMonth: !0 }), $("#report_completion_date").datetimepicker({ format: "m/d/Y", datepicker: !0, timepicker: !1, changeYear: !0, changeMonth: !0 }), $("#jsAddReportForm").validate({ rules: { report_title: { required: !0 }, report_date: { required: !0 } }, messages: { report_title: { required: "Please enter report title" }, report_date: { required: "Please select report date" } }, submitHandler: function (e) { !function (e) { null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/edit/" + getSegment(2)), method: "POST", data: $(e).serializeArray() }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { mn, _success(e.message, (function () { window.location.refresh() })) }))) }(e) } }), $(".jsAddExternalEmployee").click((function (t) { t.preventDefault(), $(".jsAddExternalBody .alert").remove(), function () { let t = `\n        <div class="row" data-external="${e}">\n            <div class="col-md-5">\n                <div class="form-group">\n                    <label for="external_employee_name">Name</label>\n                    <input type="text" name="external_employees_names[${e}]['name']" class="form-control" required>\n                </div>\n            </div>\n            <div class="col-md-5">\n                <div class="form-group">\n                    <label for="external_employee_email">Email</label>\n                    <input type="email" name="external_employees_emails[${e}]['email']" class="form-control" required>\n                </div>\n            </div>\n            <div class="col-md-1">\n                <div class="form-group">\n                    <label>&nbsp;</label>\n                    <button type="button" class="btn btn-red btn-block jsRemoveExternalEmployee">\n                        <i class="fa fa-trash"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n        `; e++, $(".jsAddExternalBody").append(t), $(`input[name="external_employees[${e - 1}]['name']"]`).rules("add", { required: !0, messages: { required: "Please enter the name" } }), $(`input[name="external_employees[${e - 1}]['email']"]`).rules("add", { required: !0, email: !0, messages: { required: "Please enter the email", email: "Please enter a valid email address" } }) }() })), $(document).on("click", ".jsRemoveExternalEmployee", (function () { const a = $(this).closest(".row"); if (a.data("id")) return function (a) { _confirm("Are you sure you want to remove this external employee? It will be removed from this report permanently as well.", (function () { !function (a) { null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/" + getSegment(2) + "/" + a.data("id")), method: "DELETE" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (t) { _success(t.message, (function () { $(`input[name="external_employees[${a.data("external")}]['name']"]`).rules("remove"), $(`input[name="external_employees[${a.data("external")}]['email']"]`).rules("remove"), a.remove(), e--, 0 == e && $(".jsAddExternalBody").html(' <div class="alert alert-info text-center">No External employees found</div>') })) }))) }(a) })) }(a); alertify.confirm("Are you sure you want to remove this external employee?", (function () { $(`input[name="external_employees[${a.data("external")}]['name']"]`).rules("remove"), $(`input[name="external_employees[${a.data("external")}]['email']"]`).rules("remove"), a.remove(), e--, 0 == e && $(".jsAddExternalBody").html(' <div class="alert alert-info text-center">No External employees found</div>') })) })), $(document).on("click", ".jsDeleteReportIncident", (function () { const e = $(this).closest("tr").data("id"); alertify.confirm("Are you sure you want to remove this incident type?", (function () { var a; a = e, null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/incident/" + a), method: "delete" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { _success(e.message, (function () { window.location.refresh() })) }))) })) })), $(".jsAddNote").click((function (e) { e.preventDefault(); const a = { type: $("#report_note_type").val(), content: CKEDITOR.instances.report_note.getData() }; "" !== a.content.trim() ? function (e) { null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/notes/" + getSegment(2) + "/0"), method: "POST", data: e }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { _success(e.message, (function () { window.location.refresh() })) }))) }(a) : _error("Please enter a note.") })), $(".jsAddIncident").click((function (e) { e.preventDefault(); const a = { type: $("#jsReportIncidentType").val() }; var s; "0" != a.type ? (s = a.type, null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/report/" + getSegment(2) + "/incident"), method: "POST", data: { incidentId: s } }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { _success(e.message, (function () { window.location.refresh() })) })))) : _error("Please select an incident type.") })), $(".jsAddDocument").click((function (e) { e.preventDefault(); const a = { title: $("#document_title").val(), file: $("#report_documents").msFileUploader("get") }; if ("" === a.title.trim()) return void _error("Please enter a file title."); if (!a.file) return void _error("Please select a file."); if (0 === Object.keys(a.file).length) return void _error("Please select a file."); if (a.file.hasError && "vimeo" === a.file.type) return void _error("Vimeo link is invalid."); if (a.file.hasError && "youtube" === a.file.type) return void _error("YouTube link is invalid."); if (a.file.hasError) return void _error(a.file.errorCode); let s = "vimeo" === a.file.type || "youtube" === a.file.type ? "link" : d(a.file).toLowerCase(); !async function (e, a, s) { if (null === t) { ml(!0, "jsPageLoader"); const n = new FormData; n.append("title", a), n.append("type", s), "youtube" === e.type || "vimeo" === e.type ? n.append("link", e.link) : n.append("file", e), t = $.ajax({ url: baseUrl("compliance_safety_reporting/file/" + getSegment(2) + "/0/" + s), method: "POST", async: !0, cache: !1, contentType: !1, processData: !1, data: n }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { _success(e.message, (function () { $("#document_title").val(""), $("#report_documents").msFileUploader("clear"), "link" === s || "audio" === s || "video" === s ? 0 != $(".jsAudioArea").find(".jsFirst").length ? $(".jsAudioArea").find(".jsFirst").append(e.view) : $(".jsAudioArea").html(`<div class="row jsFirst">${e.view}</div>`) : 0 != $(".jsDocumentsArea").find(".jsFirst").length ? $(".jsDocumentsArea").find(".jsFirst").append(e.view) : $(".jsDocumentsArea").html(`<div class="row jsFirst">${e.view}</div>`) })) })) } }(a.file, a.title, s) })), $(document).on("click", ".jsViewFile", (function (e) { e.preventDefault(); const t = $(this).closest(".jsFileBox").data("id"); Modal({ Id: "jsFileViewModal", Loader: "jsFileViewModalLoader", Title: '<span id="jsFileViewModalTitle"></span>', Body: '<div id="jsFileViewModalBody"></body>' }, (function () { l(t) })) })), $(document).on("click", ".jsReportProgressQuestionBtn", (function (e) { var a = {}; a.departments = $("#jsDepartments").val() || "", a.compliance_date = $("#jsComplianceDate").val(), null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/report_questions/" + getSegment(2)), method: "POST", data: a }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { _success(e.message, (function () { window.location.href = `${window.location.origin}/compliance_safety_reporting/edit/${getSegment(2)}?tab=questions` })) }))) })), $(".jsSendReminderEmails").click((function (e) { e.preventDefault(), _confirm("Are you sure you want to send emails to the selected employees and external recipients?", r) })), $(".jsAddAddIssueBtn").click((function (e) { e.preventDefault(), function () { if ($("#jsAddIssueModal").length <= 0) { const e = '\n\t\t\t<div class="modal fade" id="jsAddIssueModal" role="dialog" style="overflow-y:auto;" aria-labelledby="exampleModalLabel" aria-hidden="true">\n\t\t\t\t<div class="modal-dialog modal-lg" role="document">\n\t\t\t\t\t<div class="modal-content">\n\t\t\t\t\t\t<div class="modal-header">\n\t\t\t\t\t\t\t<h5 class="modal-title" id="exampleModalLabel">Report a new Issue</h5>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-body">\n\t\t\t\t\t\t\t<div class="alert alert-info text-center">Generating view please wait.</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-footer">\n\t\t\t\t\t\t\t<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>\n\t\t\t\t\t\t\t<button type="button" class="btn btn-primary jsAddIssueBtn hidden">Add Issue</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t'; $("body").append(e) } $("#jsAddIssueModal").modal({ backdrop: "static", keyboard: !1 }), $("#jsAddIssueModal").modal("show") }(), t = $.ajax({ url: baseUrl("compliance_safety_reporting/issues/report_type_id/" + reportTypeId), method: "GET" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { $("#jsAddIssueModal .modal-body").html(e.view), $.fn.modal.Constructor.prototype.enforceFocus = function () { }, $("#jsNewItemSelect").select2(), $("#jsAddIssueNoteType").select2(), CKEDITOR.replace("jsManualIssueDescription", { toolbar: [["Bold", "Italic", "-", "NumberedList", "BulletedList", "-", "Link", "Unlink"], ["FontSize", "TextColor", "BGColor"]] }), CKEDITOR.replace("jsAddIssueNote"), $("#jsAddIssueFileUploadFile").msFileUploader(o), c($("#jsNewItemSelect").val()) })) })), $(document).on("change", "#jsNewItemSelect", (function () { c($(this).val()) })), $(document).on("click", ".jsAddIssueBtn", (function () { const e = { reportId: getSegment(2), incidentId: $("#jsNewItemIncidentId").val(), issueId: $("#jsNewItemId").val(), severityLevelId: $("#jsNewItemSeverityLevel").val(), dynamicInputs: [], dynamicCheckbox: [], type: $(".jsIssueType:checked").val(), title: "", description: "", report_to_dashboard: $(".jsReportToDashboard:checked").val(), ongoing_issue: $(".jsOngoingIssue:checked").val(), reported_by: $(".jsReportedBy:checked").val(), category_of_issue: $("#jsCategoryOfIssue").val() }; if (e.reportId) if (e.incidentId) if (e.issueId) { if ("default" == e.type) { if (e.dynamicInputs = $("#jsAddIssuePanelRef").find('[name="dynamicInput[]"]').length > 0 ? $("#jsAddIssuePanelRef").find('[name="dynamicInput[]"]').map((function () { return $(this).val() })).get() : [], e.dynamicCheckbox = $("#jsAddIssuePanelRef").find('[name="dynamicCheckbox[]"]') > 0 ? $("#jsAddIssuePanelRef").find('[name="dynamicCheckbox[]"]').map((function () { return $(this).val() })).get() : [], !e.severityLevelId) return void _error("Please select a severity level.") } else if ("manual" == e.type) { if (e.severityLevelId = $(".jsManualSeverityLevel").data("id"), e.title = $("#jsManualIssueTitle").val(), e.description = CKEDITOR.instances.jsManualIssueDescription.getData(), !e.title) return void _error("Please add a manual issue title."); if (!e.description) return void _error("Please add a manual issue description.") } !async function (e) { $("#jsAddIssueModal").modal("hide"), ml(!0, "jsPageLoader"); const a = $(".jsAddIssueBtn"); a.prop("disabled", !0).text("Adding..."); try { const s = await $.ajax({ url: baseUrl("compliance_safety_reporting/issue/add/" + reportTypeId), method: "POST", data: e }), { reportId: o, incidentId: l, issueId: d } = s; $("#jsAttachedFileListing > .jsUploadIssueFile").length > 0 && await async function (e, t, a) { for (const s of n) { const n = new FormData; n.append("reportId", e), n.append("incidentId", t), n.append("itemId", a), n.append("title", s.title), n.append("type", s.type), "link" === s.type ? n.append("link", s.link) : n.append("file", s.file); try { await $.ajax({ url: baseUrl("compliance_safety_reporting/add_file_to_incident_item"), method: "POST", data: n, processData: !1, contentType: !1 }) } catch (e) { handleErrorResponse(e) } } }(o, l, d), $("#jsAttachedNoteListing > .jsUploadIssueNote").length > 0 && await async function (e, t, a) { for (const s of i) try { await $.ajax({ url: baseUrl(`compliance_safety_reporting/notes/${e}/${t}/${a}`), method: "POST", data: s }) } catch (e) { handleErrorResponse(e) } }(o, l, d), _success(s.message, (function () { ml(!1, "jsPageLoader"), window.location.href = `${window.location.origin}/compliance_safety_reporting/edit/${o}?tab=issues` })) } catch (e) { handleErrorResponse(e) } finally { t = null, a.prop("disabled", !1).text("Add Issue") } }(e) } else _error("Please provide a issue id."); else _error("Please provide a incident id."); else _error("Please provide a report id.") })), $(".jsEditIssue").click((function (e) { e.preventDefault(); const a = $(this).data("id"); !function () { if ($("#jsEditIssueModal").length <= 0) { const e = '\n\t\t\t<div class=modal fade" id="jsEditIssueModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">\n\t\t\t\t<div class="modal-dialog modal-lg" role="document">\n\t\t\t\t\t<div class="modal-content">\n\t\t\t\t\t\t<div class="modal-header">\n\t\t\t\t\t\t\t<h5 class="modal-title" id="exampleModalLabel">Modify an Issue</h5>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-body">\n\t\t\t\t\t\t\t<div class="alert alert-info text-center">Generating view please wait.</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-footer">\n\t\t\t\t\t\t\t<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>\n\t\t\t\t\t\t\t<button type="button" class="btn btn-primary jsEditModalIssue hidden">Save changes</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t'; $("body").append(e) } $("#jsEditIssueModal").modal({ backdrop: "static", keyboard: !1 }), $("#jsEditIssueModal").modal("show") }(), t = $.ajax({ url: baseUrl("compliance_safety_reporting/issues/edit/" + a), method: "GET" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { $("#jsEditIssueModal .modal-body").html(e.view), $(".jsEditModalIssue").removeClass("hidden"), CKEDITOR.replace("jsEditManualIssueDescription", { toolbar: [["Bold", "Italic", "-", "NumberedList", "BulletedList", "-", "Link", "Unlink"], ["FontSize", "TextColor", "BGColor"]] }) })) })), $(document).on("click", ".jsEditModalIssue", (function () { const e = { type: $("#jsEditManualIssueType").val(), issueId: $("#jsNewItemId").val(), severityLevelId: $("#jsNewItemSeverityLevel").val(), dynamicInputs: [], dynamicCheckbox: [], report_to_dashboard: $(".jsReportToDashboard:checked").val(), ongoing_issue: $(".jsOngoingIssue:checked").val(), reported_by: $(".jsReportedBy:checked").val(), category_of_issue: $("#jsCategoryOfIssue").val() }; if ("default" == e.type) { if (e.dynamicInputs = $("#jsAddIssuePanelRef").find('[name="dynamicInput[]"]').length > 0 ? $("#jsAddIssuePanelRef").find('[name="dynamicInput[]"]').map((function () { return $(this).val() })).get() : [], e.dynamicCheckbox = $("#jsAddIssuePanelRef").find('[name="dynamicCheckbox[]"]') > 0 ? $("#jsAddIssuePanelRef").find('[name="dynamicCheckbox[]"]').map((function () { return $(this).val() })).get() : [], !e.issueId) return void _error("Please provide a issue id."); if (!e.severityLevelId) return void _error("Please select a severity level.") } else if ("manual" == e.type) { if (e.issueTypeId = $("#jsEditManualIssueTypeId").val(), e.title = $("#jsEditManualIssueTitle").val(), e.description = CKEDITOR.instances.jsEditManualIssueDescription.getData(), !e.title) return void _error("Please add a manual issue title."); if (!e.description) return void _error("Please add a manual issue description.") } !function (e) { const a = $(".jsEditModalIssue"); a.prop("disabled", !0).text("Updating..."), null === t && (t = $.ajax({ url: baseUrl("compliance_safety_reporting/issue/edit"), method: "POST", data: e }).always((function () { t = null, a.prop("disabled", !1).text("Save changes") })).fail(handleErrorResponse).done((function (e) { _success(e.message, (function () { window.location.reload() })) }))) }(e) })), $(document).on("click", ".show-status-box", (function () { $(this).closest(".row").next().show() })), $(document).on("click", ".applicant", (function () { const e = $(this).data("id"); $(this).parent().parent().parent().find(".jsSelectedPill").html(`\n\t\t\t<div id="jsNewItemSelectedSeverity" data-id="${e}" class="csLabelPill jsSelectedLabelPill text-center" \n\t\t\tstyle="\n\t\t\tbackground-color: ${$(this).css("background-color")}; color: ${$(this).css("color")} ;">${$(this).text()}</div>\n\t\t`), $("#jsNewItemSeverityLevel").val(e) })), $(document).on("click", ".jsSelectManualSeverityLevel", (function () { const e = $(this).data("id"); $(this).parent().parent().parent().find(".jsSelectedPill").html(`\n\t\t\t<div id="jsNewManualSeverityLevelSelected" data-id="${e}" class="csLabelPill jsSelectedLabelPill jsManualSeverityLevel text-center" \n\t\t\tstyle="\n\t\t\tbackground-color: ${$(this).css("background-color")}; color: ${$(this).css("color")} ;">${$(this).text()}</div>\n\t\t`) })), $(document).on("click", ".cross", (function () { $(this).parent().parent().css("display", "none") })), $(document).on("change", ".jsIssueType", (function () { const e = $(this).val(); "manual" == e ? ($("#jsDefaultIssue").addClass("hidden"), $("#jsManualIssue").removeClass("hidden")) : "default" == e && ($("#jsManualIssue").addClass("hidden"), $("#jsDefaultIssue").removeClass("hidden")) })), $(document).on("click", ".jsIssueSection", (function () { const e = $(this).data("section"); $(".jsIssueSection").removeClass("active"), $(this).addClass("active"), "detail" == e ? ($("#jsDetailSection").removeClass("hidden"), $("#jsQuestionSection").addClass("hidden"), $("#jsFileSection").addClass("hidden"), $("#jsNoteSection").addClass("hidden")) : "question" == e ? ($("#jsDetailSection").addClass("hidden"), $("#jsQuestionSection").removeClass("hidden"), $("#jsFileSection").addClass("hidden"), $("#jsNoteSection").addClass("hidden")) : "file" == e ? ($("#jsDetailSection").addClass("hidden"), $("#jsQuestionSection").addClass("hidden"), $("#jsFileSection").removeClass("hidden"), $("#jsNoteSection").addClass("hidden")) : "note" == e && ($("#jsDetailSection").addClass("hidden"), $("#jsQuestionSection").addClass("hidden"), $("#jsFileSection").addClass("hidden"), $("#jsNoteSection").removeClass("hidden")) })), $(".jsReportBasicUpdateBtn").click((function (e) { e.preventDefault(); const a = { title: $(".report_title").val().trim(), report_date: $(".report_date").val(), report_completion_date: $(".report_completion_date").val(), report_status: $(".report_status option:selected").val(), report_id: getSegment(2) }; a.title ? a.report_date ? "completed" != a.status || a.date ? function (e) { const a = $(".jsReportBasicUpdateBtn"); a.prop("disabled", !0).text("Updating..."), null === t && (t = $.ajax({ url: baseUrl("compliance_safety_reporting/report/update/" + e.report_id), method: "POST", data: e }).always((function () { t = null, a.prop("disabled", !1).text("Save Changes") })).fail(handleErrorResponse).done((function (e) { _success(e.message, (function () { })) }))) }(a) : _error("Please add a report completion date.") : _error("Please add a report date.") : _error("Please add a report title.") })), $(".jsDeleteIssue").click((function (e) { e.preventDefault(), issueId = $(this).data("issue_id"), _confirm("Are you sure you want to delete this issue?", u) })), $(".jsViewIssuesFiles").click((function (e) { e.preventDefault(), function (e) { if ($("#jsIssueModalCommon").length <= 0) { const e = '\n\t\t\t<div class=modal fade" id="jsIssueModalCommon" tabindex="-1" role="dialog" aria-hidden="true">\n\t\t\t\t<div class="modal-dialog modal-lg" role="document">\n\t\t\t\t\t<div class="modal-content">\n\t\t\t\t\t\t<div class="modal-header">\n\t\t\t\t\t\t\t<h5 class="modal-title"></h5>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-body">\n\t\t\t\t\t\t\t<div class="alert alert-info text-center">Generating a view please wait.</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="modal-footer">\n\t\t\t\t\t\t\t<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t'; $("body").append(e) } $("#jsIssueModalCommon").find(".modal-title").html(e.title), 0 == e.count ? $("#jsIssueModalCommon").find(".modal-body").html('<div class="alert alert-info text-center">No file has been attached to this issue.</div>') : ($("#jsIssueModalCommon").find(".modal-body").html('<div class="alert alert-info text-center">Generating a view please wait.</div>'), null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/get_attached_files/" + e.reportId + "/" + e.incidentId + "/" + e.issueId), method: "GET" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { $("#jsIssueModalCommon").find(".modal-body").html(e.view), _success(e.message) })))); $("#jsIssueModalCommon").modal({ backdrop: "static", keyboard: !1 }), $("#jsIssueModalCommon").modal("show") }({ title: "View File(s)", reportId: $(this).data("report_id"), incidentId: $(this).data("incident_id"), issueId: $(this).data("issue_id"), count: $(this).data("files_count") }) })), $(document).on("click", ".jsViewFile", (function (e) { e.preventDefault(); const t = $(this).closest(".jsFileBox").data("id"); Modal({ Id: "jsFileViewModal", Loader: "jsFileViewModalLoader", Title: '<span id="jsFileViewModalTitle"></span>', Body: '<div id="jsFileViewModalBody"></body>' }, (function () { $("#jsIssueModalCommon").modal("hide"), l(t) })) })), $(document).on("click", ".jsDeleteFile", (function (e) { e.preventDefault(); const a = $(this).data("file_id"), s = $(this).data("file_type"); _confirm("Are you sure you want to remove this " + s + "? It will be removed from this issue permanently as well.", (function () { !function (e, a) { null === t && (ml(!0, "jsPageLoader"), t = $.ajax({ url: baseUrl("compliance_safety_reporting/delete_file/" + e), method: "DELETE" }).always((function () { t = null, ml(!1, "jsPageLoader") })).fail(handleErrorResponse).done((function (e) { _success("Removed " + a + " successfully", (function () { window.location.reload() })) }))) }(a, s) })) })), $(document).on("click", "#jsAddIssueFileBtn", (function (e) { e.preventDefault(); const t = { title: $("#jsAddIssueFileUploadTitle").val().trim(), file: $("#jsAddIssueFileUploadFile").msFileUploader("get") }; if (!t.title) return void _error("Please add a title of the file."); if (0 === Object.keys(t.file).length) return void _error("Please select a valid file."); if (t.hasError && "vimeo" === t.type) return void _error("Vimeo link is invalid."); if (t.hasError && "youtube" === t.type) return void _error("YouTube link is invalid."); if (t.file.hasError) return void _error("Please select a valid file."); t.fileType = "vimeo" === t.file.type || "youtube" === t.file.type ? "link" : d(t.file).toLowerCase(), $("#jsAttachedFileListingSection").removeClass("hidden"), $("#jsAttachedFileListing").prepend('<tr id="jsIssueFile_' + a + '" class="jsUploadIssueFile" row-id="jsIssueFile_' + a + '" file-title="' + t.title + '"  file-data="' + t + '"><td class="text-center">' + t.title + '</td><td class="text-center">' + t.fileType + '</td><td><a href="javascript:;" item-sid="' + a + '" attachment-type="manual" class="btn btn-block btn-info jsRemoveAttachedIssueFile">Remove</a></td></tr>'); let s = { id: a, title: t.title, type: t.fileType }; "youtube" === t.file.type || "vimeo" === t.file.type ? s.link = t.file.link : s.file = t.file, n.push(s), ++a, $("#jsAddIssueFileUploadTitle").val(""), $("#jsAddIssueFileUploadFile").msFileUploader("clear"), $('input[type="radio"][value="upload"]:checked') })), $(document).on("click", ".jsRemoveAttachedIssueFile", (function () { var e = $(this).attr("item-sid"); $("#jsIssueFile_" + e).remove(), n = n.filter((function (t) { return t.id !== e })) })), $(document).on("click", "#jsAddIssueNoteBtn", (function (e) { e.preventDefault(); const t = { type: $("#jsAddIssueNoteType").val(), content: CKEDITOR.instances.jsAddIssueNote.getData() }; if ("" === t.content.trim()) return void _error("Please enter a note."); let a = { id: s, type: t.type, content: t.content }; i.push(a), $("#jsAttachedNoteListingSection").removeClass("hidden"), $("#jsAttachedNoteListing").prepend('<tr id="jsIssueNote_' + s + '" class="jsUploadIssueNote" row-id="jsIssueNote_' + s + '"  note-type="' + t.type + '"  note-content="' + t + '"><td class="text-center">' + t.type + '</td><td class="text-center">' + t.content + '</td><td><a href="javascript:;" note-sid="' + s + '" attachment-type="manual" class="btn btn-block btn-info jsRemoveAttachedIssueNote">Remove</a></td></tr>'), ++s, $("#jsAddIssueNoteType").val(""), CKEDITOR.instances.jsAddIssueNote.setData("") })), $(document).on("click", ".jsRemoveAttachedIssueNote", (function () { var e = $(this).attr("note-sid"); $("#jsIssueNote_" + e).remove(), i = i.filter((function (t) { return t.id !== e })) })), ml(!1, "jsPageLoader") }));